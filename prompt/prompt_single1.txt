Assume you are a programming expert proficient in the various IR dialects and syntax within the LLVM project's MLIR framework. Based on the description and definition of the tosa.exp operator provided in the official documentation, please identify its syntactical rules, input-output attributes, tensor shapes, and so on. Generate a piece of IR code containing the tosa.exp operator that is syntactically correct and free of undefined behavior. Below, I will first provide a sample of my expected output format, followed by several examples of the generation process, and finally present the definition segment of the target IR that I expect to generate from the official documentation. 
Below is the expected output format. Please enclose the generated MLIR IRs in ```mlir and ``` as shown below:
```mlir
module {
  func.func @main -> {

  }
}
```
DISCLAIMER: "func" should not appear alone; it should be "func.func @".All affine definitions, such as "#map = affine_map<(d0, d1) -> (d0, d1)>", should be placed before the `module{}` block.

Here are some examples of the process for generating IRs:
Example 1- 
Please generate a piece of IR code based on the description and definition of the tosa.yield operator provided in the following official documentation:
//===----------------------------------------------------------------------===//
// Operator: yield
//===----------------------------------------------------------------------===//
def Tosa_YieldOp : Tosa_Op<"yield", [
       Terminator,
       Pure]> {
  let summary = "yield operator";

  let description = [{
    return operation within the conditional and body of
    structured control flow. Operation takes variadic operands
    but produces no results of its own.
  }];

  let arguments = (ins
    Variadic<Tosa_Tensor>:$inputs
  );

  let assemblyFormat = "$inputs attr-dict `:` type($inputs)";
}


The generated code is as follows:
module {
  func.func @main(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>, %cond: i1) -> tensor<4xf32> {
    // Using tosa.maximum operator
    %0 = "tosa.maximum"(%arg0, %arg1) : (tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>

    // A constant tensor for use in tosa.select
    %c0 = arith.constant dense<0> : tensor<4xi1>
    %1 = "tosa.select"(%c0, %arg0, %0) : (tensor<4xi1>, tensor<4xf32>, tensor<4xf32>) -> tensor<4xf32>

    // A simple if-else with tosa.yield
    %true_branch = scf.if %cond -> tensor<4xf32> {
      %2 = arith.constant dense<[1.0, 2.0, 3.0, 4.0]> : tensor<4xf32>
      scf.yield %2 : tensor<4xf32>
    } else {
      %3 = arith.constant dense<[5.0, 6.0, 7.0, 8.0]> : tensor<4xf32>
      scf.yield %3 : tensor<4xf32>
    }

    return %true_branch : tensor<4xf32>
  }
}

Example 2- 
Please generate a piece of IR code based on the description and definition of the tosa.floor operator provided in the following official documentation:
//===----------------------------------------------------------------------===//
// Operator: floor
//===----------------------------------------------------------------------===//
def Tosa_FloorOp : Tosa_ElementwiseOp<"floor", [SameOperandsAndResultElementType]> {
  let summary = "Elementwise floor op";

  let description = [{
    Elementwise floor operation
  }];

  let arguments = (ins
    Tosa_Tensor:$input1
  );

  let results = (outs
    Tosa_Tensor:$output
  );
}


The generated code is as follows:
module {
  func.func @main(%arg0: tensor<4xf32>) -> (tensor<4xf32>) {
    %0 = "tosa.floor"(%arg0) : (tensor<4xf32>) -> tensor<4xf32>
    return %0 : tensor<4xf32>
  }
}

Example 3- 
Please generate a piece of IR code based on the description and definition of the tosa.exp operator provided in the following official documentation:
//===----------------------------------------------------------------------===//
// Operator: exp
//===----------------------------------------------------------------------===//
def Tosa_ExpOp : Tosa_ElementwiseOp<"exp", [SameOperandsAndResultElementType]> {
  let summary = "Elementwise exp op";

  let description = [{
    Elementwise e to the x operation
  }];

  let arguments = (ins
    Tosa_Tensor:$input1
  );

  let results = (outs
    Tosa_Tensor:$output
  );

  let hasFolder = 1;
}


The generated code is as follows:
module {
  func.func @main(%input: tensor<4xf32>) -> (tensor<4xf32>) {
    %0 = "tosa.exp"(%input) : (tensor<4xf32>) -> tensor<4xf32>
    return %0 : tensor<4xf32>
  }
}

Target -
Please generate a piece of IR code based on the description and definition of the tosa.exp operator provided in the following official documentation:
//===----------------------------------------------------------------------===//
// Operator: exp
//===----------------------------------------------------------------------===//
def Tosa_ExpOp : Tosa_ElementwiseOp<"exp", [SameOperandsAndResultElementType]> {
  let summary = "Elementwise exp op";

  let description = [{
    Elementwise e to the x operation
  }];

  let arguments = (ins
    Tosa_Tensor:$input1
  );

  let results = (outs
    Tosa_Tensor:$output
  );

  let hasFolder = 1;
}



Note: Please follow the previous steps and examples to generate a piece of IR code based on the description and definition of the tosa.exp operator provided in the official documentation above.