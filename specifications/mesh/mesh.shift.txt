mesh.shift (mesh::ShiftOp) ¶
Shift over a device mesh.

Syntax:

operation ::= `mesh.shift` $input `on` $mesh (`mesh_axes` `=` $mesh_axes^)?
              `shift_axis` `=` $shift_axis
              `offset` `=` $offset
              (`rotate` $rotate^)?
              attr-dict `:` type($input) `->` type($result)
Within each device group shift along mesh axis shift_axis by an offset offset. The result on devices that do not have a corresponding source is undefined. shift_axis must be one of mesh_axes. If the rotate attribute is present, instead of a shift a rotation is done.

Example:

mesh.mesh @mesh0(shape = 2x4)
%1 = mesh.shift on @mesh0 mesh_axes = [1]
  shift_axis = 1 offset = 2 rotate
  : tensor<2xi8> -> tensor<2xi8>
Input:

mesh axis 1
----------->

+----+----+----+----+
|  1 |  2 |  3 |  4 |
+----+----+----+----+
|  5 |  6 |  7 |  8 |
+----+----+----+----+
Result:

+----+----+----+----+
|  3 |  4 |  1 |  2 |
+----+----+----+----+
|  7 |  8 |  5 |  6 |
+----+----+----+----+
Traits: AlwaysSpeculatableImplTrait, SameOperandsAndResultElementType, SameOperandsAndResultShape

Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface), OpAsmOpInterface, SymbolUserOpInterface

Effects: MemoryEffects::Effect{}

Attributes: ¶
Attribute	MLIR Type	Description
mesh	::mlir::FlatSymbolRefAttr	flat symbol reference attribute
mesh_axes	::mlir::DenseI16ArrayAttr	i16 dense array attribute
shift_axis	::mlir::IntegerAttr	index attribute
offset	::mlir::IntegerAttr	64-bit signless integer attribute
rotate	::mlir::UnitAttr	unit attribute
Operands: ¶
Operand	Description
input	non-0-ranked.tensor of any type values
Results: ¶
Result	Description
result	ranked tensor of any type values