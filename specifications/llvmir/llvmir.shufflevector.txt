//===----------------------------------------------------------------------===//
// ShuffleVectorOp
//===----------------------------------------------------------------------===//

def LLVM_ShuffleVectorOp : LLVM_Op<"shufflevector",
    [Pure, AllTypesMatch<["v1", "v2"]>]> {
  let summary = "Construct a permutation of two vectors.";

  let arguments = (ins LLVM_AnyVector:$v1, LLVM_AnyVector:$v2,
                       DenseI32ArrayAttr:$mask);
  let results = (outs LLVM_AnyVector:$res);

  let builders = [
    OpBuilder<(ins "Value":$v1, "Value":$v2, "DenseI32ArrayAttr":$mask,
                   CArg<"ArrayRef<NamedAttribute>", "{}">:$attrs)>,
    OpBuilder<(ins "Value":$v1, "Value":$v2, "ArrayRef<int32_t>":$mask)>
  ];

  let assemblyFormat = [{
    $v1 `,` $v2 $mask attr-dict `:` type($v1)
    custom<ShuffleType>(ref(type($v1)), type($res), ref($mask))
  }];

  let hasVerifier = 1;

  string llvmInstName = "ShuffleVector";
  string llvmBuilder = [{
    $res = builder.CreateShuffleVector($v1, $v2, $mask);
  }];
  string mlirBuilder = [{
    auto *svInst = cast<llvm::ShuffleVectorInst>(inst);
    SmallVector<int32_t> mask(svInst->getShuffleMask());
    $res = $_builder.create<LLVM::ShuffleVectorOp>(
      $_location, $v1, $v2, mask);
  }];
}

// Misc operations.
def LLVM_SelectOp
    : LLVM_Op<"select",
          [Pure, AllTypesMatch<["trueValue", "falseValue", "res"]>,
           DeclareOpInterfaceMethods<FastmathFlagsInterface>]>,
      LLVM_Builder<
          "$res = builder.CreateSelect($condition, $trueValue, $falseValue);"> {
  let arguments = (ins LLVM_ScalarOrVectorOf<I1>:$condition,
                   LLVM_Type:$trueValue, LLVM_Type:$falseValue,
                   DefaultValuedAttr<LLVM_FastmathFlagsAttr,
                                     "{}">:$fastmathFlags);
  let results = (outs LLVM_Type:$res);
  let assemblyFormat = "operands attr-dict `:` type($condition) `,` type($res)";
  string llvmInstName = "Select";
  string mlirBuilder = [{
    auto op = $_builder.create<LLVM::SelectOp>(
      $_location, $_resultType, $condition, $trueValue, $falseValue);
    moduleImport.setFastmathFlagsAttr(inst, op);
    $res = op;
  }];
}
def LLVM_FreezeOp : LLVM_Op<"freeze", [Pure, SameOperandsAndResultType]> {
  let arguments = (ins LLVM_Type:$val);
  let results = (outs LLVM_Type:$res);
  let builders = [LLVM_OneResultOpBuilder];
  let assemblyFormat = "$val attr-dict `:` type($val)";
  string llvmInstName = "Freeze";
  string llvmBuilder = "$res = builder.CreateFreeze($val);";
  string mlirBuilder = [{
    $res = $_builder.create<LLVM::FreezeOp>($_location, $val);
  }];
}

// Terminators.
def LLVM_BrOp : LLVM_TerminatorOp<"br",
    [DeclareOpInterfaceMethods<BranchOpInterface>, Pure]> {
  let arguments = (ins
    Variadic<LLVM_Type>:$destOperands,
    OptionalAttr<LoopAnnotationAttr>:$loop_annotation
  );
  let successors = (successor AnySuccessor:$dest);
  let assemblyFormat = [{
    $dest (`(` $destOperands^ `:` type($destOperands) `)`)? attr-dict
  }];
  let builders = [
    OpBuilder<(ins "Block *":$dest), [{
      build($_builder, $_state, ValueRange(), dest);
    }]>,
    OpBuilder<(ins "ValueRange":$operands, "Block *":$dest), [{
      build($_builder, $_state, operands, /*loop_annotation=*/{}, dest);
    }]>,
    LLVM_TerminatorPassthroughOpBuilder
  ];
}
def LLVM_CondBrOp : LLVM_TerminatorOp<"cond_br",
    [AttrSizedOperandSegments,
     DeclareOpInterfaceMethods<BranchOpInterface>,
     DeclareOpInterfaceMethods<BranchWeightOpInterface>,
     Pure]> {
  let arguments = (ins I1:$condition,
                   Variadic<LLVM_Type>:$trueDestOperands,
                   Variadic<LLVM_Type>:$falseDestOperands,
                   OptionalAttr<DenseI32ArrayAttr>:$branch_weights,
                   OptionalAttr<LoopAnnotationAttr>:$loop_annotation);
  let successors = (successor AnySuccessor:$trueDest, AnySuccessor:$falseDest);
  let assemblyFormat = [{
    $condition ( `weights` `(` $branch_weights^ `)` )? `,`
    $trueDest (`(` $trueDestOperands^ `:` type($trueDestOperands) `)`)? `,`
    $falseDest (`(` $falseDestOperands^ `:` type($falseDestOperands) `)`)?
    attr-dict
  }];

  let builders = [
    OpBuilder<(ins "Value":$condition, "Block *":$trueDest,
      "ValueRange":$trueOperands, "Block *":$falseDest,
      "ValueRange":$falseOperands,
      CArg<"std::optional<std::pair<uint32_t, uint32_t>>", "{}">:$weights)>,
  OpBuilder<(ins "Value":$condition, "Block *":$trueDest,
    "Block *":$falseDest, CArg<"ValueRange", "{}">:$falseOperands),
  [{
      build($_builder, $_state, condition, trueDest, ValueRange(), falseDest,
            falseOperands);
  }]>,
  OpBuilder<(ins "Value":$condition, "ValueRange":$trueOperands, "ValueRange":$falseOperands,
    "DenseI32ArrayAttr":$branchWeights, "Block *":$trueDest, "Block *":$falseDest),
  [{
      build($_builder, $_state, condition, trueOperands, falseOperands, branchWeights,
      {}, trueDest, falseDest);
  }]>, LLVM_TerminatorPassthroughOpBuilder];
}

