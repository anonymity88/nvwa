gpu.grid_dim (gpu::GridDimOp) ¶
Syntax:

operation ::= `gpu.grid_dim` $dimension (`upper_bound` $upper_bound^)? attr-dict
Returns the number of thread blocks in the grid along the x, y, or z dimension.

Example:

%gDimZ = gpu.grid_dim z
If known_grid_size is set on an this operation’s enclosing gpu.func, or gpu.known_grid_size is set on an enclosing FunctionOpInterface implementor, or if the enclosing gpu.launch specifies a constant size for dimension’s grid length, these contextual facts may be used to infer that this operation has a constant value, though such a transformation will not be performed by canonicalization or the default constant folder. Executions which cause that constant-value assumption to be false incur undefined behavior.

If upper_bound is set, executions where the grid size in dimension would exceed upper_bound cause undefined behavior.

There is an implicit upper bound of kMaxDim (currently uint32_t::max).

Traits: AlwaysSpeculatableImplTrait

Interfaces: ConditionallySpeculatable, InferIntRangeInterface, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface), OpAsmOpInterface

Effects: MemoryEffects::Effect{}

Attributes: ¶
Attribute	MLIR Type	Description
dimension	::mlir::gpu::DimensionAttr	
a dimension, either 'x', 'y', or 'z'
upper_bound	::mlir::IntegerAttr	index attribute
Results: ¶
Result	Description
«unnamed»	index