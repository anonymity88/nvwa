//===----------------------------------------------------------------------===//
// CmpFOp
//===----------------------------------------------------------------------===//

def Arith_CmpFOp : Arith_CompareOp<"cmpf",
    [DeclareOpInterfaceMethods<ArithFastMathInterface>]> {
  let summary = "floating-point comparison operation";
  let description = [{
    The `cmpf` operation compares its two operands according to the float
    comparison rules and the predicate specified by the respective attribute.
    The predicate defines the type of comparison: (un)orderedness, (in)equality
    and signed less/greater than (or equal to) as well as predicates that are
    always true or false.  The operands must have the same type, and this type
    must be a float type, or a vector or tensor thereof.  The result is an i1,
    or a vector/tensor thereof having the same shape as the inputs. Unlike cmpi,
    the operands are always treated as signed. The u prefix indicates
    *unordered* comparison, not unsigned comparison, so "une" means unordered or
    not equal. For the sake of readability by humans, custom assembly form for
    the operation uses a string-typed attribute for the predicate.  The value of
    this attribute corresponds to lower-cased name of the predicate constant,
    e.g., "one" means "ordered not equal".  The string representation of the
    attribute is merely a syntactic sugar and is converted to an integer
    attribute by the parser.

    Example:

    ```mlir
    %r1 = arith.cmpf oeq, %0, %1 : f32
    %r2 = arith.cmpf ult, %0, %1 : tensor<42x42xf64>
    %r3 = "arith.cmpf"(%0, %1) {predicate: 0} : (f8, f8) -> i1
    ```
  }];

  let arguments = (ins Arith_CmpFPredicateAttr:$predicate,
                       FloatLike:$lhs,
                       FloatLike:$rhs,
                       DefaultValuedAttr<
                         Arith_FastMathAttr, "::mlir::arith::FastMathFlags::none">:$fastmath);

  let extraClassDeclaration = [{
    static arith::CmpFPredicate getPredicateByName(StringRef name);
  }];

  let builders = [
    OpBuilder<(ins "::mlir::arith::CmpFPredicateAttr":$predicate,
                   "Value":$lhs, "Value":$rhs), [{
      build($_builder, $_state, predicate, lhs, rhs,
          mlir::arith::FastMathFlagsAttr::get($_builder.getContext(),
              mlir::arith::FastMathFlags::none));
    }]>
  ];

  let hasFolder = 1;
  let hasCanonicalizer = 1;
  let assemblyFormat = [{ $predicate `,` $lhs `,` $rhs (`fastmath` `` $fastmath^)?
                          attr-dict `:` type($lhs)}];
}

