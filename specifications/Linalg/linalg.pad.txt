//===----------------------------------------------------------------------===//
// PadOp
//===----------------------------------------------------------------------===//

def PadOp : Op<Transform_Dialect, "structured.pad",
    [FunctionalStyleTransformOpTrait, DeclareOpInterfaceMethods<MemoryEffectsOpInterface>,
     TransformOpInterface,
     ReportTrackingListenerFailuresOpTrait]> {
  let description = [{
    Pads the operations pointed to by the target handle using the options
    provides as operation attributes. The operation returns a handle to the
    padded operation and to the padding operation ("tensor.pad").

    To preserve tensor SSA use-def chains, the unpadded result is copied back to
    the original destination tensor of the targeted op. The op that copies back
    the result can be customized with `copy_back_op`:

    * "bufferization.materialize_in_destination" (default)
    * "linalg.copy"
    * "none" (no copy back)

    #### Return modes

    This operation ignores non-Linalg ops and drops them in the return.
    This operation may produce a definite failure if the padding fails for any
    reason.

    If all the operations referred to by the `target` handle pad
    properly, the transform succeeds. Otherwise the transform produces a
    silenceable failure.
    The return handle points to only the subset of successfully produced
    padded operations, which can be empty.
  }];

  let arguments =
    (ins TransformHandleTypeInterface:$target,
         DefaultValuedAttr<ArrayAttr, "{}">:$padding_values,
         DefaultValuedAttr<I64ArrayAttr, "{}">:$padding_dimensions,
         Variadic<TransformAnyParamTypeOrAnyHandle>:$pad_to_multiple_of,
         DefaultValuedOptionalAttr<DenseI64ArrayAttr, "{}">:
                          $static_pad_to_multiple_of,
         DefaultValuedAttr<I64ArrayAttr, "{}">:$pack_paddings,
         DefaultValuedAttr<
          TypedArrayAttrBase<I64ArrayAttr, "array of arrays of i64">,
          "{}">:$transpose_paddings,
         DefaultValuedAttr<StrAttr, "::mlir::bufferization::MaterializeInDestinationOp::getOperationName()">:$copy_back_op);
  let results = (outs TransformHandleTypeInterface:$padded,
                      TransformHandleTypeInterface:$pad,
                      TransformHandleTypeInterface:$copy);

  let assemblyFormat = [{
    $target 
    (`pad_to_multiple_of` custom<DynamicIndexList>($pad_to_multiple_of, $static_pad_to_multiple_of)^)?
    attr-dict
    `:` functional-type(operands, results)
  }];

  let hasVerifier = 1;

  let builders = [
    // Builder for a transform::PadOp with automatic inference of padding
    // value. Warning: this will set the value 0 for the inferred elemental
    // type without taking the op into account and thus only work for the
    // add/mul ring at the moment.
    // TODO: support other operations (e.g. min, max etc).
    OpBuilder<(ins "Value":$target,
                   "ArrayRef<int64_t>":$paddingDimensions,
                   CArg<"ArrayRef<int64_t>", "{}">:$staticPadToMultipleOf,
                   CArg<"ArrayRef<int64_t>", "{}">:$packPaddings,
                   CArg<"ArrayRef<Attribute>", "{}">:$transposePaddings,
                   CArg<"StringRef", "::mlir::bufferization::MaterializeInDestinationOp::getOperationName()">:$copyBackOp)>,
    OpBuilder<(ins "Value":$target,
                   "ArrayRef<int64_t>":$paddingDimensions,
                   "ArrayRef<OpFoldResult>":$mixedPadToMultipleOf,
                   CArg<"ArrayRef<int64_t>", "{}">:$packPaddings,
                   CArg<"ArrayRef<Attribute>", "{}">:$transposePaddings,
                   CArg<"StringRef", "::mlir::bufferization::MaterializeInDestinationOp::getOperationName()">:$copyBackOp)>
  ];

  let extraClassDeclaration = [{
    /// copy_back_op attribute value indicating that no copy back is desired.
    static constexpr StringRef kCopyOpNone = "none";

    /// Returns a mix of dynamic `pad_to_multiple_of` and static `static_pad_to_multiple_of`.
    SmallVector<OpFoldResult> getMixedPadToMultipleOf();

    ::mlir::DiagnosedSilenceableFailure apply(
      ::mlir::transform::TransformRewriter &rewriter,
      ::mlir::transform::TransformResults &results,
      ::mlir::transform::TransformState &state);
  }];
}

