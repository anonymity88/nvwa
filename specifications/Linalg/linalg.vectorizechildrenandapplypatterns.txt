//===----------------------------------------------------------------------===//
// VectorizeChildrenAndApplyPatternsOp
//===----------------------------------------------------------------------===//

def VectorizeChildrenAndApplyPatternsOp :
  Op<Transform_Dialect, "structured.vectorize_children_and_apply_patterns",
    [FunctionalStyleTransformOpTrait, MemoryEffectsOpInterface,
     TransformEachOpTrait, TransformOpInterface,
     ReportTrackingListenerFailuresOpTrait]> {
  let description = [{
    Vectorizes all children contained in the given `target` using the
    configuration specified by the attributes of this op. This only vectorizes
    structured ops that operate on shaped types and does not vectorize loops or
    straight-line. Internally, it applies a set of rewrite patterns, some of
    which enable vectorization and some of which clean up the results.
    Therefore, it can only be applied to an op with the "isolated from above"
    property. This transformation only fails if the entire pattern rewriting
    failed, i.e., it does **not** fail when no ops were vectorized.

    Finer granularity can be achieved either with the `VectorizeOp` for
    individual ops or by outlining the target part of the payload IR into, e.g.,
    a function, performing this transformation, and inlining it back.

    Note that this transformation invalidates the handles to any payload IR
    operation that is contained inside the vectorization target.

    This transformation supports the following attributes:
    - `vectorize_padding`: a `UnitAttr` to activate the vectorization of
      `tensor.pad` ops. Different pipelines may prefer to lower such ops to
      loops.
    - `disable_multi_reduction_to_contract_patterns`: a `UnitAttr` to deactivate
      the rewrite of `vector.multi_reduction` to `vector.contract`. This is
      intended to be used in tests only.
    - `disable_transfer_permutation_map_lowering_patterns`: a `UnitAttr` to
      deactivate the rewrite of `vector.transfer` with permutation maps into
      explicit `vector.transpose` operations. This is intended to be used in
      tests only but may be promoted to a first class attribute in the future.

    #### Return modes:

    This operation produces a definite failure if vectorization fails for any
    reason.
    The operation always returns the handle to the target op that is expected
    to be isolated from above.
  }];

  let arguments = (ins TransformHandleTypeInterface:$target,
                   UnitAttr:$vectorize_padding,
                   UnitAttr:$vectorize_nd_extract,
                   UnitAttr:$flatten_1d_depthwise_conv,
                   UnitAttr:$disable_multi_reduction_to_contract_patterns,
                   UnitAttr:$disable_transfer_permutation_map_lowering_patterns);
  let results = (outs TransformHandleTypeInterface:$transformed);

  let assemblyFormat =
      "$target attr-dict `:`"
      "functional-type(operands, results)";

  let builders = [
    OpBuilder<(ins "Value":$target,
               CArg<"bool", "false">:$vectorizePadding,
               CArg<"bool", "false">:$vectorizeNDExtract,
               CArg<"bool", "false">:$flatten1DDepthwise)>
  ];
  let extraClassDeclaration = [{
    ::mlir::DiagnosedSilenceableFailure applyToOne(
        ::mlir::transform::TransformRewriter &rewriter,
        ::mlir::Operation *target,
        ::mlir::transform::ApplyToEachResultList &results,
        ::mlir::transform::TransformState &state);
  }];
}

def VectorizeOp : Op<Transform_Dialect, "structured.vectorize",
    [DeclareOpInterfaceMethods<MemoryEffectsOpInterface>,
     TransformOpInterface, ReportTrackingListenerFailuresOpTrait]> {
  let description = [{
    Vectorize the target ops, which must be Linalg ops.

    Use the optional vector sizes to specify exactly what configuration the
    vectorizer should use. It will then use masked vectors of the specified
    size to enforce this configuration ("masked vectorization"). If no vector
    sizes are specified, the vectorizer will infer the shapes to use from the
    target Linalg ops ("regular vectorization"). More specifically:

    ```mlir
    # Masked vectorization - vector sizes are specified explicitly
    transform.structured.vectorize %target vector_sizes [1, 4] : !transform.any_op
    # Regular vectorization - vector sizes are inferred from the target Op
    transform.structured.vectorize %target : !transform.any_op
    ```

    The vector sizes can be either static or dynamic (SSA values). In case of
    SSA values, the handle must be mapped to exactly one payload op with
    exactly one index-typed result.

    Note: The input vector sizes must be bigger than or equal to their
    counterpart iteration space sizes.

    Typically this operator should be applied to linalg operations that have
    already been tiled to the appropriate sizes.

    #### Return modes:

    This operation produces a silenceable failure if at least one target op is
    not a Linalg op or fails to vectorize. It produces a definite failure if
    the dynamic vector sizes (SSA values) do not satisfy the constraints
    mentioned above.
  }];

  let arguments = (ins TransformHandleTypeInterface:$target,
                       Variadic<TransformAnyParamTypeOrAnyHandle>:$vector_sizes,
                       DefaultValuedOptionalAttr<DenseI64ArrayAttr, "{}">:
                          $static_vector_sizes,
                       OptionalAttr<UnitAttr>:$vectorize_nd_extract,
                       DefaultValuedOptionalAttr<DenseBoolArrayAttr, "{}">:
                          $scalable_sizes);

  let results = (outs);

  // We use oilist here to elide the optional `vector_sizes` when empty list
  // is passed.
  let assemblyFormat = [{
    $target oilist(
      `vector_sizes` custom<DynamicIndexList>(
        $vector_sizes,
        $static_vector_sizes,
        $scalable_sizes))
    attr-dict
    `:` type($target)(`,`type($vector_sizes)^)? 
  }];

  let hasVerifier = 1;

  let extraClassDeclaration = [{
    // TODO: applyToOne.
    ::mlir::DiagnosedSilenceableFailure apply(
        ::mlir::transform::TransformRewriter &rewriter,
        ::mlir::transform::TransformResults &transformResults,
        ::mlir::transform::TransformState &state);

    ::llvm::SmallVector<::mlir::OpFoldResult> getMixedVectorSizes();
  }];
}

