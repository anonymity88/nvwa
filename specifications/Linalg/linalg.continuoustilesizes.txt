//===----------------------------------------------------------------------===//
// ContinuousTileSizesOp
//===----------------------------------------------------------------------===//

def ContinuousTileSizesOp : Op<Transform_Dialect, "structured.continuous_tile_sizes",
       [DeclareOpInterfaceMethods<MemoryEffectsOpInterface>,
        DeclareOpInterfaceMethods<TransformOpInterface>,
        ReportTrackingListenerFailuresOpTrait]> {
  let description = [{
    This transform emits the IR computing the list of (1) exponentially
    diminishing tile sizes that are powers of 2; and (2) the corresponding
    chunk-sizes the target op should be split into along the given dimension.

    For example, for `target_size` 9, and `dimension` 0 for the following
    linalg op as target

    ```
      %0 = linalg.matmul  ins(%arg0, %arg1: tensor<25x34xf32>, tensor<34x25xf32>)
                      outs(%arg2: tensor<25x25xf32>)
    ```

    the first result `tile_sizes` will be a list of diminishing tile sizes
    9, 4, 2, 1; and the second result will be a list of chunk sizes
    18, 4, 2, 1 that the corresponding dimension should be split into.

    After the target op has been split along the given dimension (for example
    using multiway split), each chunk can be tiled with the corresponding tile
    size in the `tile_sizes` list generated as a result of this op.

    Specifying the output type as !transform.param<i64> will cause `tile_sizes`
    and `chunk_sizes` to be computed statically and not dynamically.
  }];

  let arguments = (ins TransformHandleTypeInterface:$target,
                       ConfinedAttr<I64Attr, [IntNonNegative]>:$dimension,
                       ConfinedAttr<I64Attr, [IntNonNegative]>:$target_size);
  let results = (outs TransformAnyParamTypeOrAnyHandle:$tile_sizes,
                      TransformAnyParamTypeOrAnyHandle:$chunk_sizes);
  let hasVerifier = 1;
  let assemblyFormat =
    "$target attr-dict `:` custom<ContinuousTileSizeTypes>("
    "type($target), type($tile_sizes), type($chunk_sizes))";

}

