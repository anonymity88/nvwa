//===----------------------------------------------------------------------===//
// SplitOp
//===----------------------------------------------------------------------===//

def SplitOp : Op<Transform_Dialect, "structured.split",
    [DeclareOpInterfaceMethods<MemoryEffectsOpInterface>,
     DeclareOpInterfaceMethods<TransformOpInterface>,
     ReportTrackingListenerFailuresOpTrait]> {
  let description = [{
    Splits the given `target` op into two or more complementary
    parts, which combined cover the entire iteration domain of the original op.
    The split is performed along the iteration space dimension provided as
    chunk size attribute specifying the size of the lower part; the remaining
    range in the iteration space is assigned as the upper part. In case of
    dimension overflow, the transformation fails. The split is performed at the
    dimension iterator value specified as either the static chunk size
    attribute when it is known at transform IR construction time or
    as the handle to an operation producing a single index-typed value
    when it is computed by payload IR. In the latter case, the chunk size
    point must be set to `ShapedType::kDynamic` and the dynamic size handle
    must point to as many value-producing operations as there are structured
    operations pointed to by the target handle.

    The operation consumes the target handle, but preserves the chunk size
    handle if provided. Without the `multiway` attribute, it produces two
    new handles pointing to the two parts of the structured op after splitting,
    in the same order as the target operand, with the first handle
    corresponding to the part with lower iteration space indices.

    Multiway split mode is enabled by specifying the `multiway` attribute.
    In this mode a single `target` op is split into multiple parts covering
    the iteration space of the specified dimension. `static_chunk_sizes` and
    `dynamic_chunk_sizes` in this case is a list of chunk sizes that the given
    dimension should be split into. With `multiway` it produces two handles;
    the first handle is a list of the multiple parts of the structured op
    after splitting, where the target dimensions for each linalg op in the
    list corresponds to the chunk sizes specfied in the input split list.
    If the chunk sizes do not cover the entire iteration space, the leftover
    chunk is the last payload in the first handle. The second handle is empty.
  }];

  let arguments = (ins TransformHandleTypeInterface:$target,
                       I64Attr:$dimension,
                       Optional<TransformAnyParamTypeOrAnyHandle>:$dynamic_chunk_sizes,
                       I64Attr:$static_chunk_sizes,
                       UnitAttr:$multiway);
  let results = (outs TransformHandleTypeInterface:$first,
                      TransformHandleTypeInterface:$second);
  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
}

