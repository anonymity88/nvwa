bufferization.dealloc (bufferization::DeallocOp) ¶
Deallocates the given memrefs if no alias is retained

Syntax:

operation ::= `bufferization.dealloc` (` ``(` $memrefs^ `:` type($memrefs) `)` `if` ` ` `(` $conditions `)` )?
              (`retain` ` ` `(` $retained^ `:` type($retained) `)` )? attr-dict
This operation deallocates each of the given memrefs if there is no alias to that memref in the list of retained memrefs and the corresponding condition value is set. This condition can be used to indicate and pass on ownership of memref values (or in other words, the responsibility of deallocating that memref). If two memrefs alias each other, only one will be deallocated to avoid double free situations.

The number of variadic memref operands (the memrefs to be deallocated) must equal the number of variadic condition operands and correspond to each other element-wise.

The memref operands must be the originally allocated memrefs, however, the retained memref operands may be arbitrary memrefs.

This operation returns a variadic number of updatedConditions operands, one updated condition per retained memref. An updated condition indicates the ownership of the respective retained memref. It is computed as the disjunction of all conditions operands where the corresponding to memrefs operand aliases with the retained memref. If the retained memref has no aliases among memrefs, the resulting updated condition is ‘false’. This is because all memrefs that need to be deallocated within one basic block should be added to the same bufferization.dealloc operation at the end of the block; if no aliasing memref is present, then it does not have to be deallocated and thus we don’t need to claim ownership. If the memrefs to be deallocated are split over multiple dealloc operations (e.g., to avoid aliasing checks at runtime between the memref operands), then the results have to be manually combined using an arith.ori operation and all of them still require the same list of retained memref operands unless the (potentially empty) set of aliasing memrefs can be determined statically. In that case, the updatedCondition operand can be replaced accordingly (e.g., by a canonicalizer).

Example:

%0:3 = bufferization.dealloc (%a0, %a1 : memref<2xf32>, memref<4xi32>)
  if (%cond0, %cond1) retain (%r0, %r1, %r2 : memref<?xf32>, memref<f64>,
  memref<2xi32>)
Deallocation will be called on %a0 if %cond0 is ’true’ and neither %r0, %r1, or %r2 are aliases of %a0. %a1 will be deallocated when %cond1 is set to ’true’ and none of %r0, %r1, %r2, and %a0 are aliases.

Note that this can be an expensive operation if there are many operands that cannot be optimized away. The runtime cost of this operation (assuming that nothing is optimized away) is O(|memrefs|^2+|memrefs|*|retained|). The cost in terms of memory space is O(|memrefs|+|retained|). As a result, it is recommended to place it carefully in the IR such that most operands can be optimized away by running the buffer-deallocation-simplification pass.

Traits: AttrSizedOperandSegments

Interfaces: InferTypeOpInterface

Operands: ¶
Operand	Description
memrefs	variadic of ranked or unranked memref of any type values
conditions	variadic of 1-bit signless integer
retained	variadic of ranked or unranked memref of any type values
Results: ¶
Result	Description
updatedConditions	variadic of 1-bit signless integer