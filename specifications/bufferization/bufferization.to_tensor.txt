bufferization.to_tensor (bufferization::ToTensorOp) ¶
Create a tensor from a memref

Syntax:

operation ::= `bufferization.to_tensor` $memref (`restrict` $restrict^)? (`writable` $writable^)? attr-dict
              `:` type($memref) `to` type($result)
An operation that creates a tensor from a memref. The result value is a tensor whose shape and element type match the memref operand.

The opposite of this op is to_memref. Together, these two ops are useful for source/target materializations when doing type conversions involving tensors and memrefs.

Example:

// Produces a value of tensor<4x?xf32> type.
%t = bufferization.to_tensor %m : memref<4x?xf32, #layout, 0> to tensor<4x?xf32>
If the writable unit attribute is set, the produced tensor is considered “writable” during bufferization. Otherwise, every OpOperand that bufferizes to a write to the future buffer of the resulting tensor (or an alias thereof) will bufferize out-of-place to prevent emitting any writes to memref during bufferization.

The restrict unit attribute (similar to the C restrict keyword) indicates that the produced tensor result is the only way for the tensor IR to gain access to the memref operand (or an alias thereof). E.g., there must be no other to_tensor op with the same or with an aliasing memref operand.

Note: Only to_tensor ops with the restrict unit attribute are supported by One-Shot Bufferize. Other IR is rejected. (To support to_tensor without restrict, One-Shot Bufferize would have to analyze memref IR.) Ops that have incorrect usage of restrict may bufferize incorrectly.

Example:

%t = bufferization.to_tensor %m restrict writable : memref<4xf32> to tensor<4xf32>

// %t is writable, so the tensor.insert may bufferize in-place in the
// absence of other conflicts.
%r = tensor.insert %f into %t[%idx] : tensor<4xf32>
to_tensor ops are not bufferized. They are expected to fold away after bufferization. If there are non-bufferizable ops in the IR and allowUnknownOps is set, they may be part of the resulting IR and not fold away. However, such IR is no longer bufferizable with One-Shot Bufferize.

Traits: SameOperandsAndResultElementType, SameOperandsAndResultShape

Interfaces: BufferizableOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
restrict	::mlir::UnitAttr	unit attribute
writable	::mlir::UnitAttr	unit attribute
Operands: ¶
Operand	Description
memref	ranked or unranked memref of any type values
Results: ¶
Result	Description
result	tensor of any type values