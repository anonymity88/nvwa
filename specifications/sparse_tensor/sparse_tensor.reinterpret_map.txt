sparse_tensor.reinterpret_map (sparse_tensor::ReinterpretMapOp) ¶
Reinterprets the dimension/level maps of the source tensor

Syntax:

operation ::= `sparse_tensor.reinterpret_map` $source attr-dict `:` type($source) `to` type($dest)
Reinterprets the dimension-to-level and level-to-dimension map specified in source according to the type of dest. reinterpret_map is a no-op and is introduced merely to resolve type conflicts. It does not make any modification to the source tensor and source/dest tensors are considered to be aliases.

source and dest tensors are “reinterpretable” if and only if they have the exactly same storage at a low level. That is, both source and dest has the same number of levels and level types, and their shape is consistent before and after reinterpret_map.

Example:

#CSC = #sparse_tensor.encoding<{
  map = (d0, d1) -> (d1: dense, d0: compressed)
}>
#CSR = #sparse_tensor.encoding<{
  map = (d0, d1) -> (d0: dense, d1: compressed)
}>
%t1 = sparse_tensor.reinterpret_map %t0 : tensor<3x4xi32, #CSC> to tensor<4x3xi32, #CSR>

#BSR = #sparse_tensor.encoding<{
  map = ( i, j ) -> ( i floordiv 2 : dense,
                      j floordiv 3 : compressed,
                      i mod 2      : dense,
                      j mod 3      : dense
  )
}>
#DSDD = #sparse_tensor.encoding<{
  map = (i, j, k, l) -> (i: dense, j: compressed, k: dense, l: dense)
}>
%t1 = sparse_tensor.reinterpret_map %t0 : tensor<6x12xi32, #BSR> to tensor<3x4x2x3xi32, #DSDD>
Interfaces: NoMemoryEffect (MemoryEffectOpInterface)

Effects: MemoryEffects::Effect{}

Operands: ¶
Operand	Description
source	sparse tensor of any type values
Results: ¶
Result	Description
dest	sparse tensor of any type values