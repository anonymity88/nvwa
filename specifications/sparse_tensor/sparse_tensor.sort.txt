sparse_tensor.sort (sparse_tensor::SortOp) ¶
Sorts the arrays in xs and ys lexicographically on the integral values found in the xs list

Syntax:

operation ::= `sparse_tensor.sort` $algorithm $n`,`$xy (`jointly` $ys^)? attr-dict`:` type($xy) (`jointly` type($ys)^)?
Sorts the xs values along with some ys values that are put in a single linear buffer xy. The affine map attribute perm_map specifies the permutation to be applied on the xs before comparison, the rank of the permutation map also specifies the number of xs values in xy. The optional index attribute ny provides the number of ys values in xy. When ny is not explicitly specified, its value is 0. This instruction supports a more efficient way to store the COO definition in sparse tensor type.

The buffer xy should have a dimension not less than n * (rank(perm_map) + ny) while the buffers in ys should have a dimension not less than n. The behavior of the operator is undefined if this condition is not met.

Example:

sparse_tensor.sort insertion_sort_stable %n, %x { perm_map = affine_map<(i,j) -> (j,i)> }
  : memref<?xindex>
Attributes: ¶
Attribute	MLIR Type	Description
perm_map	::mlir::AffineMapAttr	AffineMap attribute
ny	::mlir::IntegerAttr	index attribute
algorithm	::mlir::sparse_tensor::SparseTensorSortKindAttr	
sparse tensor sort algorithm
Operands: ¶
Operand	Description
n	index
xy	1D memref of integer or index values
ys	variadic of 1D memref of any type values