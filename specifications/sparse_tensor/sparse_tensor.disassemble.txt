sparse_tensor.disassemble (sparse_tensor::DisassembleOp) ¶
Copies the levels and values of the given sparse tensor

Syntax:

operation ::= `sparse_tensor.disassemble` $tensor attr-dict `:` type($tensor)`out_lvls` `(` $out_levels `:` type($out_levels) `)` `out_vals` `(` $out_values `:` type($out_values) `)` `->``(` type($ret_levels) `)` `,` type($ret_values) `,` `(` type($lvl_lens)   `)` `,` type($val_len)
The disassemble operation is the inverse of sparse_tensor::assemble. It copies the per-level position and coordinate arrays together with the values array of the given sparse tensor into the user-supplied buffers along with the actual length of the memory used in each returned buffer.

This operation can be used for returning a disassembled MLIR sparse tensor; e.g., copying the sparse tensor contents into pre-allocated numpy arrays back to Python. It is the user’s responsibility to allocate large enough buffers of the appropriate types to hold the sparse tensor contents. The sparsifier simply copies all fields of the sparse tensor into the user-supplied buffers without any sanity test to verify data integrity.

Example:

// input COO format |1.1, 0.0, 0.0, 0.0|
//    of 3x4 matrix |0.0, 0.0, 2.2, 3.3|
//                  |0.0, 0.0, 0.0, 0.0|
%p, %c, %v, %p_len, %c_len, %v_len =
  sparse_tensor.disassemble %s : tensor<3x4xf64, #COO>
     out_lvls(%op, %oi : tensor<2xindex>, tensor<3x2xindex>)
     out_vals(%od : tensor<3xf64>) ->
       (tensor<2xindex>, tensor<3x2xindex>), tensor<3xf64>, (index, index), index
// %p = arith.constant dense<[ 0,              3 ]> : tensor<2xindex>
// %c = arith.constant dense<[[0,0], [1,2], [1,3]]> : tensor<3x2xindex>
// %v = arith.constant dense<[ 1.1,   2.2,   3.3 ]> : tensor<3xf64>
// %p_len = 2
// %c_len = 6 (3x2)
// %v_len = 3
Traits: AlwaysSpeculatableImplTrait, SameVariadicResultSize

Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)

Effects: MemoryEffects::Effect{}

Operands: ¶
Operand	Description
tensor	sparse tensor of any type values
out_levels	variadic of ranked tensor of signless integer or index values
out_values	ranked tensor of any type values
Results: ¶
Result	Description
ret_levels	variadic of ranked tensor of signless integer or index values
ret_values	ranked tensor of any type values
lvl_lens	variadic of scalar like
val_len	scalar like