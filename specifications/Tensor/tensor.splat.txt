//===----------------------------------------------------------------------===//
// SplatOp
//===----------------------------------------------------------------------===//

def Tensor_SplatOp : Tensor_Op<"splat", [
    DeclareOpInterfaceMethods<OpAsmOpInterface, ["getAsmResultNames"]>,
    DeclareOpInterfaceMethods<ReifyRankedShapedTypeOpInterface>,
    Pure,
    TypesMatchWith<"operand type matches element type of result",
                   "aggregate", "input",
                   "::llvm::cast<TensorType>($_self).getElementType()">
  ]> {
  let summary = "tensor splat or broadcast operation";
  let description = [{
    Broadcast the operand to all elements of the result tensor. The operand is
    required to be of integer/index/float type.

    An additional argument of type `index` must be provided for each dynamic
    dimension present in the result type.

    Example for a statically shaped tensor:

    ```mlir
    %s = arith.constant 1.0 : f32
    %t = tensor.splat %s : tensor<8x16xf32>
    ```

    Example for a tensor containing dynamic dimensions:

    ```mlir
    // Broadcasts %s to a 3D dynamically shaped tensor, with %m and %n binding
    // to dimensions 0 and 2 of the resulting tensor, respectively.
    %m = arith.constant 10 : index
    %n = arith.constant 30 : index
    %t = tensor.splat %s[%m, %n] : tensor<?x20x?xf32>
    ```
  }];

  let arguments = (ins AnyTypeOf<[AnySignlessInteger, Index, AnyFloat],
                                 "integer/index/float type">:$input,
                       Variadic<Index>:$dynamicSizes);
  let results = (outs AnyRankedTensor:$aggregate);

  let builders = [
    // Build with an explicit result type and a list of values corresponding
    // to the dynamic sizes present in the result type.
    OpBuilder<(ins "Value":$element,
                   "Type":$aggregateType,
                   CArg<"ValueRange", "{}">:$dynamicSizes)>,

    // Build with a result tensor shape and a list of values corresponding to
    // the elements in the result tensor shape set to ShapedType::kDynamic.
    OpBuilder<(ins "Value":$element,
                   "ArrayRef<int64_t>":$staticShape,
                   CArg<"ValueRange", "{}">:$dynamicSizes)>,

    // Build with mixed static/dynamic sizes, where an attribute represents
    // a static dimension and a value represents a dynamic dimension.
    OpBuilder<(ins "Value":$element, "ArrayRef<OpFoldResult>":$sizes)>
  ];

  let assemblyFormat = "$input (`[` $dynamicSizes^ `]`)? attr-dict `:` type($aggregate)";

  let hasFolder = 1;
  let hasVerifier = 1;
}

