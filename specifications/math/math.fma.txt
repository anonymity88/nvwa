math.fma (math::FmaOp) ¶
Floating point fused multipy-add operation

Syntax:

operation ::= `math.fma` $a `,` $b `,` $c (`fastmath` `` $fastmath^)?
              attr-dict `:` type($result)
The fma operation takes three operands and returns one result, each of these is required to be the same type. Operands must be of floating point type (i.e., scalar, tensor or vector).

Example:

// Scalar fused multiply-add: d = a*b + c
%d = math.fma %a, %b, %c : f64
The semantics of the operation correspond to those of the llvm.fma intrinsic. In the particular case of lowering to LLVM, this is guaranteed to lower to the llvm.fma.* intrinsic.

Traits: AlwaysSpeculatableImplTrait, Elementwise, SameOperandsAndResultType, Scalarizable, Tensorizable, Vectorizable

Interfaces: ArithFastMathInterface, ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface), VectorUnrollOpInterface

Effects: MemoryEffects::Effect{}

Attributes: ¶
Attribute	MLIR Type	Description
fastmath	::mlir::arith::FastMathFlagsAttr	
Floating point fast math flags
Operands: ¶
Operand	Description
a	floating-point-like
b	floating-point-like
c	floating-point-like
Results: ¶
Result	Description
result	floating-point-like