emitc.global (emitc::GlobalOp) ¶
A global variable

Syntax:

operation ::= `emitc.global` (`extern` $extern_specifier^)?
              (`static` $static_specifier^)?
              (`const` $const_specifier^)?
              $sym_name
              `:` custom<EmitCGlobalOpTypeAndInitialValue>($type, $initial_value)
              attr-dict
The emitc.global operation declares or defines a named global variable. The backing memory for the variable is allocated statically and is described by the type of the variable. Optionally, an initial_value can be provided. Internal linkage can be specified using the static_specifier unit attribute and external linkage can be specified using the extern_specifier unit attribute. Note that the default linkage without those two keywords depends on whether the target is C or C++ and whether the global variable is const. The global variable can also be marked constant using the const_specifier unit attribute. Writing to such constant global variables is undefined.

The global variable can be accessed by using the emitc.get_global to retrieve the value for the global variable.

Example:

// Global variable with an initial value.
emitc.global @x : !emitc.array<2xf32> = dense<0.0>
// Global variable with an initial values.
emitc.global @x : !emitc.array<3xi32> = dense<[0, 1, 2]>
// External global variable
emitc.global extern @x : !emitc.array<2xf32>
// Constant global variable with internal linkage
emitc.global static const @x : i32 = 0
Interfaces: Symbol

Attributes: ¶
Attribute	MLIR Type	Description
sym_name	::mlir::StringAttr	string attribute
type	::mlir::TypeAttr	any type attribute
initial_value	::mlir::Attribute	An opaque attribute or TypedAttr instance
extern_specifier	::mlir::UnitAttr	unit attribute
static_specifier	::mlir::UnitAttr	unit attribute
const_specifier	::mlir::UnitAttr	unit attribute