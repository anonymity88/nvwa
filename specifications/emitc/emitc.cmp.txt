emitc.cmp (emitc::CmpOp) ¶
Comparison operation

Syntax:

operation ::= `emitc.cmp` $predicate `,` operands attr-dict `:` functional-type(operands, results)
With the emitc.cmp operation the comparison operators ==, !=, <, <=, >, >=, <=> can be applied.

Its first argument is an attribute that defines the comparison operator:

equal to (mnemonic: "eq"; integer value: 0)
not equal to (mnemonic: "ne"; integer value: 1)
less than (mnemonic: "lt"; integer value: 2)
less than or equal to (mnemonic: "le"; integer value: 3)
greater than (mnemonic: "gt"; integer value: 4)
greater than or equal to (mnemonic: "ge"; integer value: 5)
three-way-comparison (mnemonic: "three_way"; integer value: 6)
Example:

// Custom form of the cmp operation.
%0 = emitc.cmp eq, %arg0, %arg1 : (i32, i32) -> i1
%1 = emitc.cmp lt, %arg2, %arg3 : 
    (
      !emitc.opaque<"std::valarray<float>">,
      !emitc.opaque<"std::valarray<float>">
    ) -> !emitc.opaque<"std::valarray<bool>">
// Code emitted for the operations above.
bool v5 = v1 == v2;
std::valarray<bool> v6 = v3 < v4;
Traits: CExpression

Attributes: ¶
Attribute	MLIR Type	Description
predicate	::mlir::emitc::CmpPredicateAttr	
allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6
Operands: ¶
Operand	Description
lhs	type supported by EmitC
rhs	type supported by EmitC
Results: ¶
Result	Description
«unnamed»	type supported by EmitC