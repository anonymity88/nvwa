omp.atomic.capture (omp::AtomicCaptureOp) ¶
Performs an atomic capture

Syntax:

operation ::= `omp.atomic.capture` oilist(
              `hint` `(` custom<SynchronizationHint>($hint) `)`
              |
              `memory_order` `(` custom<ClauseAttr>($memory_order) `)`
              ) $region attr-dict
This operation performs an atomic capture.

The region has the following allowed forms:

  omp.atomic.capture {
    omp.atomic.update ...
    omp.atomic.read ...
    omp.terminator
  }

  omp.atomic.capture {
    omp.atomic.read ...
    omp.atomic.update ...
    omp.terminator
  }

  omp.atomic.capture {
    omp.atomic.read ...
    omp.atomic.write ...
    omp.terminator
  }
hint is the value of hint (as specified in the hint clause). It is a compile time constant. As the name suggests, this is just a hint for optimization.

memory_order indicates the memory ordering behavior of the construct. It can be one of seq_cst, acq_rel, release, acquire or relaxed.

Traits: RecursiveMemoryEffects, SingleBlockImplicitTerminator<TerminatorOp>, SingleBlock

Interfaces: AtomicCaptureOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
hint	::mlir::IntegerAttr	64-bit signless integer attribute
memory_order	::mlir::omp::ClauseMemoryOrderKindAttr	
MemoryOrderKind Clause