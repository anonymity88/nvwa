omp.map.info (omp::MapInfoOp) ¶
Syntax:

operation ::= `omp.map.info` `var_ptr` `(` $var_ptr `:` type($var_ptr) `,` $var_type `)`
              oilist(
              `var_ptr_ptr` `(` $var_ptr_ptr `:` type($var_ptr_ptr) `)`
              | `map_clauses` `(` custom<MapClause>($map_type) `)`
              | `capture` `(` custom<CaptureType>($map_capture_type) `)`
              | `members` `(` $members `:` custom<MembersIndex>($members_index) `:` type($members) `)`
              | `bounds` `(` $bounds `)`
              ) `->` type($omp_ptr) attr-dict
The MapInfoOp captures information relating to individual OpenMP map clauses that are applied to certain OpenMP directives such as Target and Target Data.

For example, the map type modifier; such as from, tofrom and to, the variable being captured or the bounds of an array section being mapped.

It can be used to capture both implicit and explicit map information, where explicit is an argument directly specified to an OpenMP map clause or implicit where a variable is utilised in a target region but is defined externally to the target region.

This map information is later used to aid the lowering of the target operations they are attached to providing argument input and output context for kernels generated or the target data mapping environment.

Example (Fortran):

integer :: index
!$target map(to: index)
=>

omp.map.info var_ptr(%index_ssa) map_type(to) map_capture_type(ByRef)
  name(index)
Description of arguments:

var_ptr: The address of variable to copy.
var_type: The type of the variable to copy.
var_ptr_ptr: Used when the variable copied is a member of a class, structure or derived type and refers to the originating struct.
members: Used to indicate mapped child members for the current MapInfoOp, represented as other MapInfoOp’s, utilised in cases where a parent structure type and members of the structure type are being mapped at the same time. For example: map(to: parent, parent->member, parent->member2[:10])
members_index: Used to indicate the ordering of members within the containing parent (generally a record type such as a structure, class or derived type), e.g. struct {int x, float y, double z}, x would be 0, y would be 1, and z would be 2. This aids the mapping.
bounds: Used when copying slices of array’s, pointers or pointer members of objects (e.g. derived types or classes), indicates the bounds to be copied of the variable. When it’s an array slice it is in rank order where rank 0 is the inner-most dimension.
‘map_type’: OpenMP map type for this map capture, for example: from, to and always. It’s a bitfield composed of the OpenMP runtime flags stored in OpenMPOffloadMappingFlags.
‘map_capture_type’: Capture type for the variable e.g. this, byref, byvalue, byvla this can affect how the variable is lowered.
name: Holds the name of variable as specified in user clause (including bounds).
partial_map: The record type being mapped will not be mapped in its entirety, it may be used however, in a mapping to bind it’s mapped components together.
Traits: AttrSizedOperandSegments

Attributes: ¶
Attribute	MLIR Type	Description
var_type	::mlir::TypeAttr	any type attribute
members_index	::mlir::ArrayAttr	Array of 64-bit integer array attributes
map_type	::mlir::IntegerAttr	64-bit unsigned integer attribute
map_capture_type	::mlir::omp::VariableCaptureKindAttr	
variable capture kind
name	::mlir::StringAttr	string attribute
partial_map	::mlir::BoolAttr	bool attribute
Operands: ¶
Operand	Description
var_ptr	OpenMP-compatible variable type
var_ptr_ptr	OpenMP-compatible variable type
members	variadic of OpenMP-compatible variable type
bounds	variadic of Type for representing omp map clause bounds information
Results: ¶
Result	Description
omp_ptr	OpenMP-compatible variable type