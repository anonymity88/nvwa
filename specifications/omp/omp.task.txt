omp.task (omp::TaskOp) ¶
Task construct

Syntax:

operation ::= `omp.task` oilist(
              `allocate` `(`
              custom<AllocateAndAllocator>($allocate_vars, type($allocate_vars),
              $allocator_vars, type($allocator_vars)) `)`
              |
              `depend` `(`
              custom<DependVarList>($depend_vars, type($depend_vars), $depend_kinds) `)`
              |
              `final` `(` $final `)`
              |
              `if` `(` $if_expr `)`
              |
              `mergeable` $mergeable
              |
              `priority` `(` $priority `:` type($priority) `)`
              |
              `untied` $untied
              |
              `detach` `(` $event_handle `:` type($event_handle) `)`
              )
              custom<InReductionPrivateRegion>(
              $region, $in_reduction_vars, type($in_reduction_vars),
              $in_reduction_byref, $in_reduction_syms, $private_vars,
              type($private_vars), $private_syms) attr-dict
The task construct defines an explicit task.

For definitions of “undeferred task”, “included task”, “final task” and “mergeable task”, please check OpenMP Specification.

When an if clause is present on a task construct, and the value of if_expr evaluates to false, an “undeferred task” is generated, and the encountering thread must suspend the current task region, for which execution cannot be resumed until execution of the structured block that is associated with the generated task is completed.

The in_reduction clause specifies that this particular task (among all the tasks in current taskgroup, if any) participates in a reduction. in_reduction_byref indicates whether each reduction variable should be passed by value or by reference.

The allocator_vars and allocate_vars parameters are a variadic list of values that specify the memory allocator to be used to obtain storage for private values.

The depend_kinds and depend_vars arguments are variadic lists of values that specify the dependencies of this particular task in relation to other tasks.

When a final clause is present and the final clause expression evaluates to true, the generated tasks will be final tasks. All task constructs encountered during execution of a final task will generate final and included tasks. The use of a variable in a final clause expression causes an implicit reference to the variable in all enclosing constructs.

When the mergeable clause is present, the tasks generated by the construct are “mergeable tasks”.

The priority clause is a hint for the priority of the generated tasks. The priority is a non-negative integer expression that provides a hint for task execution order. Among all tasks ready to be executed, higher priority tasks (those with a higher numerical value in the priority clause expression) are recommended to execute before lower priority ones. The default priority-value when no priority clause is specified should be assumed to be zero (the lowest priority).

If the untied clause is present on a task construct, any thread in the team can resume the task region after a suspension. The untied clause is ignored if a final clause is present on the same task construct and the final expression evaluates to true, or if a task is an included task.

The detach clause specifies that the task generated by the construct on which it appears is a
detachable task. A new allow-completion event is created and connected to the completion of the associated task region. The original event-handle is updated to represent that allow-completion event before the task data environment is created.

Traits: AttrSizedOperandSegments, AutomaticAllocationScope

Interfaces: BlockArgOpenMPOpInterface, OutlineableOpenMPOpInterface, ReductionClauseInterface

Attributes: ¶
Attribute	MLIR Type	Description
depend_kinds	::mlir::ArrayAttr	depend clause in a target or task construct array
in_reduction_byref	::mlir::DenseBoolArrayAttr	i1 dense array attribute
in_reduction_syms	::mlir::ArrayAttr	symbol ref array attribute
mergeable	::mlir::UnitAttr	unit attribute
private_syms	::mlir::ArrayAttr	symbol ref array attribute
untied	::mlir::UnitAttr	unit attribute
Operands: ¶
Operand	Description
allocate_vars	variadic of any type
allocator_vars	variadic of any type
depend_vars	variadic of OpenMP-compatible variable type
final	1-bit signless integer
if_expr	1-bit signless integer
in_reduction_vars	variadic of OpenMP-compatible variable type
priority	integer
private_vars	variadic of any type
event_handle	OpenMP-compatible variable type