omp.loop_nest (omp::LoopNestOp) ¶
Rectangular loop nest

This operation represents a collapsed rectangular loop nest. For each rectangular loop of the nest represented by an instance of this operation, lower and upper bounds, as well as a step variable, must be defined.

The lower and upper bounds specify a half-open range: the range includes the lower bound but does not include the upper bound. If the loop_inclusive attribute is specified then the upper bound is also included.

The body region can contain any number of blocks. The region is terminated by an omp.yield instruction without operands. The induction variables, represented as entry block arguments to the loop nest operation’s single region, match the types of the loop_lower_bounds, loop_upper_bounds and loop_steps arguments.

omp.loop_nest (%i1, %i2) : i32 = (%c0, %c0) to (%c10, %c10) step (%c1, %c1) {
  %a = load %arrA[%i1, %i2] : memref<?x?xf32>
  %b = load %arrB[%i1, %i2] : memref<?x?xf32>
  %sum = arith.addf %a, %b : f32
  store %sum, %arrC[%i1, %i2] : memref<?x?xf32>
  omp.yield
}
This is a temporary simplified definition of a loop based on existing OpenMP loop operations intended to serve as a stopgap solution until the long-term representation of canonical loops is defined. Specifically, this operation is intended to serve as a unique source for loop information during the transition to making omp.distribute, omp.simd, omp.taskloop and omp.wsloop wrapper operations. It is not intended to help with the addition of support for loop transformations, non-rectangular loops and non-perfectly nested loops.

Traits: RecursiveMemoryEffects, SameVariadicOperandSize

Attributes: ¶
Attribute	MLIR Type	Description
loop_inclusive	::mlir::UnitAttr	unit attribute
Operands: ¶
Operand	Description
loop_lower_bounds	variadic of integer or index
loop_upper_bounds	variadic of integer or index
loop_steps	variadic of integer or index