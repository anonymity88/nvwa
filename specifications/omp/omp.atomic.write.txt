omp.atomic.write (omp::AtomicWriteOp) ¶
Performs an atomic write

Syntax:

operation ::= `omp.atomic.write` $x `=` $expr oilist(
              `hint` `(` custom<SynchronizationHint>($hint) `)`
              |
              `memory_order` `(` custom<ClauseAttr>($memory_order) `)`
              ) `:` type($x) `,` type($expr) attr-dict
This operation performs an atomic write.

The operand x is the address to where the expr is atomically written w.r.t. multiple threads. The evaluation of expr need not be atomic w.r.t. the write to address. In general, the type(x) must dereference to type(expr).

hint is the value of hint (as specified in the hint clause). It is a compile time constant. As the name suggests, this is just a hint for optimization.

memory_order indicates the memory ordering behavior of the construct. It can be one of seq_cst, acq_rel, release, acquire or relaxed.

Interfaces: AtomicWriteOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
hint	::mlir::IntegerAttr	64-bit signless integer attribute
memory_order	::mlir::omp::ClauseMemoryOrderKindAttr	
MemoryOrderKind Clause
Operands: ¶
Operand	Description
x	OpenMP-compatible variable type
expr	any type