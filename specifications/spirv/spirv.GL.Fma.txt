spirv.GL.Fma (spirv::GLFmaOp) ¶
Computes a * b + c.

In uses where this operation is decorated with NoContraction:

fma is considered a single operation, whereas the expression a * b + c is considered two operations.
The precision of fma can differ from the precision of the expression a * b + c.
fma will be computed with the same precision as any other fma decorated with NoContraction, giving invariant results for the same input values of a, b, and c.
Otherwise, in the absence of a NoContraction decoration, there are no special constraints on the number of operations or difference in precision between fma and the expression a * b +c.

The operands must all be a scalar or vector whose component type is floating-point.

Result Type and the type of all operands must be the same type. Results are computed per component.

fma-op ::= ssa-id `=` `spirv.GL.Fma` ssa-use, ssa-use, ssa-use `:`
           float-scalar-vector-type
Example: ¶
%0 = spirv.GL.Fma %a, %b, %c : f32
%1 = spirv.GL.Fma %a, %b, %c : vector<3xf16>
Traits: AlwaysSpeculatableImplTrait

Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface), QueryCapabilityInterface, QueryExtensionInterface, QueryMaxVersionInterface, QueryMinVersionInterface

Effects: MemoryEffects::Effect{}

Operands: ¶
Operand	Description
x	16/32/64-bit float or vector of 16/32/64-bit float values of length 2/3/4/8/16
y	16/32/64-bit float or vector of 16/32/64-bit float values of length 2/3/4/8/16
z	16/32/64-bit float or vector of 16/32/64-bit float values of length 2/3/4/8/16
Results: ¶
Result	Description
result	16/32/64-bit float or vector of 16/32/64-bit float values of length 2/3/4/8/16