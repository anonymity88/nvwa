spirv.VectorShuffle (spirv::VectorShuffleOp) ¶
Select arbitrary components from two vectors to make a new vector.

Syntax:

operation ::= `spirv.VectorShuffle` attr-dict $components $vector1 `,` $vector2 `:`
              type($vector1) `,` type($vector2) `->` type($result)
Result Type must be an OpTypeVector. The number of components in Result Type must be the same as the number of Component operands.

Vector 1 and Vector 2 must both have vector types, with the same Component Type as Result Type. They do not have to have the same number of components as Result Type or with each other. They are logically concatenated, forming a single vector with Vector 1’s components appearing before Vector 2’s. The components of this logical vector are logically numbered with a single consecutive set of numbers from 0 to N

1, where N is the total number of components.
Components are these logical numbers (see above), selecting which of the logically numbered components form the result. Each component is an unsigned 32-bit integer. They can select the components in any order and can repeat components. The first component of the result is selected by the first Component operand, the second component of the result is selected by the second Component operand, etc. A Component literal may also be FFFFFFFF, which means the corresponding result component has no source and is undefined. All Component literals must either be FFFFFFFF or in [0, N - 1] (inclusive).

Note: A vector “swizzle” can be done by using the vector for both Vector operands, or using an OpUndef for one of the Vector operands.

Example: ¶
%0 = spirv.VectorShuffle [1: i32, 3: i32, 5: i32] %vector1, %vector2 :
  vector<4xf32>, vector<2xf32> -> vector<3xf32>
Traits: AlwaysSpeculatableImplTrait

Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface), QueryCapabilityInterface, QueryExtensionInterface, QueryMaxVersionInterface, QueryMinVersionInterface

Effects: MemoryEffects::Effect{}

Attributes: ¶
Attribute	MLIR Type	Description
components	::mlir::ArrayAttr	32-bit integer array attribute
Operands: ¶
Operand	Description
vector1	vector of bool or 8/16/32/64-bit integer or 16/32/64-bit float values of length 2/3/4/8/16
vector2	vector of bool or 8/16/32/64-bit integer or 16/32/64-bit float values of length 2/3/4/8/16
Results: ¶
Result	Description
result	vector of bool or 8/16/32/64-bit integer or 16/32/64-bit float values of length 2/3/4/8/16