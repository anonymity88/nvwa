spirv.SpecConstantOperation (spirv::SpecConstantOperationOp) ¶
Declare a new specialization constant that results from doing an operation.

This op declares a SPIR-V specialization constant that results from doing an operation on other constants (specialization or otherwise).

In the spv dialect, this op is modelled as follows:

spv-spec-constant-operation-op ::= `spirv.SpecConstantOperation` `wraps`
                                     generic-spirv-op `:` function-type
In particular, an spirv.SpecConstantOperation contains exactly one region. In turn, that region, contains exactly 2 instructions:

One of SPIR-V’s instructions that are allowed within an OpSpecConstantOp.
An spirv.mlir.yield instruction as the terminator.
The following SPIR-V instructions are valid:

OpSConvert,
OpUConvert,
OpFConvert,
OpSNegate,
OpNot,
OpIAdd,
OpISub,
OpIMul,
OpUDiv,
OpSDiv,
OpUMod,
OpSRem,
OpSMod
OpShiftRightLogical,
OpShiftRightArithmetic,
OpShiftLeftLogical
OpBitwiseOr,
OpBitwiseXor,
OpBitwiseAnd
OpVectorShuffle,
OpCompositeExtract,
OpCompositeInsert
OpLogicalOr,
OpLogicalAnd,
OpLogicalNot,
OpLogicalEqual,
OpLogicalNotEqual
OpSelect
OpIEqual,
OpINotEqual
OpULessThan,
OpSLessThan
OpUGreaterThan,
OpSGreaterThan
OpULessThanEqual,
OpSLessThanEqual
OpUGreaterThanEqual,
OpSGreaterThanEqual
TODO Add capability-specific ops when supported.

Example: ¶
%0 = spirv.Constant 1: i32
%1 = spirv.Constant 1: i32

%2 = spirv.SpecConstantOperation wraps "spirv.IAdd"(%0, %1) : (i32, i32) -> i32
Traits: AlwaysSpeculatableImplTrait, SingleBlockImplicitTerminator<YieldOp>, SingleBlock

Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface), QueryCapabilityInterface, QueryExtensionInterface, QueryMaxVersionInterface, QueryMinVersionInterface

Effects: MemoryEffects::Effect{}

Results: ¶
Result	Description
result	any type