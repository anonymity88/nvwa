spirv.AtomicCompareExchange (spirv::AtomicCompareExchangeOp) ¶
Perform the following steps atomically with respect to any other atomic accesses within Scope to the same location:

Syntax:

operation ::= `spirv.AtomicCompareExchange` $memory_scope $equal_semantics $unequal_semantics operands attr-dict `:`
              type($pointer)
load through Pointer to get an Original Value,

get a New Value from Value only if Original Value equals Comparator, and

store the New Value back through Pointer’only if ‘Original Value equaled Comparator.

The instruction’s result is the Original Value.

Result Type must be an integer type scalar.

Use Equal for the memory semantics of this instruction when Value and Original Value compare equal.

Use Unequal for the memory semantics of this instruction when Value and Original Value compare unequal. Unequal must not be set to Release or Acquire and Release. In addition, Unequal cannot be set to a stronger memory-order then Equal.

The type of Value must be the same as Result Type. The type of the value pointed to by Pointer must be the same as Result Type. This type must also match the type of Comparator.

Memory is a memory Scope.

Example: ¶
%0 = spirv.AtomicCompareExchange <Workgroup> <Acquire> <None>
                                %pointer, %value, %comparator
                                : !spirv.ptr<i32, WorkGroup>
Interfaces: InferTypeOpInterface, QueryCapabilityInterface, QueryExtensionInterface, QueryMaxVersionInterface, QueryMinVersionInterface

Attributes: ¶
Attribute	MLIR Type	Description
memory_scope	::mlir::spirv::ScopeAttr	
valid SPIR-V Scope
equal_semantics	::mlir::spirv::MemorySemanticsAttr	
valid SPIR-V MemorySemantics
unequal_semantics	::mlir::spirv::MemorySemanticsAttr	
valid SPIR-V MemorySemantics
Operands: ¶
Operand	Description
pointer	any SPIR-V pointer type
value	8/16/32/64-bit integer
comparator	8/16/32/64-bit integer
Results: ¶
Result	Description
result	8/16/32/64-bit integer