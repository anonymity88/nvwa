spirv.KHR.CooperativeMatrixStore (spirv::KHRCooperativeMatrixStoreOp) ¶
Stores a cooperative matrix through a pointer

Syntax:

operation ::= `spirv.KHR.CooperativeMatrixStore` $pointer `,` $object `,` $stride `,` $matrix_layout ( `,` $memory_operand^ )? attr-dict `:`
              type(operands)
Store a cooperative matrix through a pointer. Pointer is a pointer. Its type must be an OpTypePointer whose Type operand is a scalar or vector type. If the Shader capability was declared, Pointer must point into an array and any ArrayStride decoration on Pointer is ignored.

Object is the object to store. Its type must be an OpTypeCooperativeMatrixKHR.

MemoryLayout specifies how matrix elements are laid out in memory. It must come from a 32-bit integer constant instruction whose value corresponds to a Cooperative Matrix Layout. See the Cooperative Matrix Layout table for a description of the layouts and detailed layout-specific rules.

Stride further qualifies how matrix elements are laid out in memory. It must be a scalar integer type and its exact semantics depend on MemoryLayout.

Memory Operand must be a Memory Operand literal. If not present, it is the same as specifying None.

NOTE: In earlier versions of the SPIR-V spec, ‘Memory Operand’ was known as ‘Memory Access’.

For a given dynamic instance of this instruction, all operands of this instruction must be the same for all invocations in a given scope instance (where the scope is the scope the cooperative matrix type was created with). All invocations in a given scope instance must be active or all must be inactive.

TODO: In the SPIR-V spec, stride is an optional argument. We should also support this optionality in the SPIR-V dialect.

Example: ¶
  spirv.KHR.CooperativeMatrixStore %ptr, %obj, %stride, <RowMajor> :
    !spirv.ptr<i32, StorageBuffer>, !spirv.coopmatrix<16x8xi32, Workgroup, MatrixA>, i32

  spirv.KHR.CooperativeMatrixStore %ptr, %obj, %stride, <ColumnMajor>, <Volatile> :
    !spirv.ptr<f32, StorageBuffer>, !spirv.coopmatrix<8x8xf32, Subgroup, MatrixAcc>, i64
Interfaces: QueryCapabilityInterface, QueryExtensionInterface, QueryMaxVersionInterface, QueryMinVersionInterface

Attributes: ¶
Attribute	MLIR Type	Description
matrix_layout	::mlir::spirv::CooperativeMatrixLayoutKHRAttr	
valid SPIR-V Cooperative Matrix Layout (KHR)
memory_operand	::mlir::spirv::MemoryAccessAttr	
valid SPIR-V MemoryAccess
Operands: ¶
Operand	Description
pointer	any SPIR-V pointer type
object	any SPIR-V cooperative matrix type
stride	8/16/32/64-bit integer