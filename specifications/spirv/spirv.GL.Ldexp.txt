spirv.GL.Ldexp (spirv::GLLdexpOp) ¶
Builds y such that y = significand * 2^exponent

Syntax:

operation ::= `spirv.GL.Ldexp` attr-dict $x `:` type($x) `,` $exp `:` type($exp) `->` type($y)
Builds a floating-point number from x and the corresponding integral exponent of two in exp:

significand * 2^exponent

If this product is too large to be represented in the floating-point type, the resulting value is undefined. If exp is greater than +128 (single precision) or +1024 (double precision), the resulting value is undefined. If exp is less than -126 (single precision) or -1022 (double precision), the result may be flushed to zero. Additionally, splitting the value into a significand and exponent using frexp and then reconstructing a floating-point value using ldexp should yield the original input for zero and all finite non-denormalized values.

The operand x must be a scalar or vector whose component type is floating-point.

The exp operand must be a scalar or vector with integer component type. The number of components in x and exp must be the same.

Result Type must be the same type as the type of x. Results are computed per component.

Example: ¶
%y = spirv.GL.Ldexp %x : f32, %exp : i32 -> f32
%y = spirv.GL.Ldexp %x : vector<3xf32>, %exp : vector<3xi32> -> vector<3xf32>
Traits: AlwaysSpeculatableImplTrait

Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface), QueryCapabilityInterface, QueryExtensionInterface, QueryMaxVersionInterface, QueryMinVersionInterface

Effects: MemoryEffects::Effect{}

Operands: ¶
Operand	Description
x	16/32/64-bit float or vector of 16/32/64-bit float values of length 2/3/4/8/16
exp	8/16/32/64-bit integer or vector of 8/16/32/64-bit integer values of length 2/3/4/8/16
Results: ¶
Result	Description
y	16/32/64-bit float or vector of 16/32/64-bit float values of length 2/3/4/8/16