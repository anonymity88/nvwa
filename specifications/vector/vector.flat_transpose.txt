vector.flat_transpose (vector::FlatTransposeOp) ¶
Vector matrix transposition on flattened 1-D MLIR vectors

Syntax:

operation ::= `vector.flat_transpose` $matrix attr-dict `:` type($matrix) `->` type($res)
This is the counterpart of llvm.matrix.transpose in MLIR. It serves the purposes of more progressive lowering and localized type conversion. Higher levels typically lower matrix tranpositions into ‘vector.transpose’ operations. Subsequent rewriting rule progressively lower these operations into ‘vector.flat_transpose’ operations to bring the operations closer to the hardware ISA.

The vector.flat_transpose op treats the 1-D input matrix as a 2-D matrix with rows and columns, and returns the transposed matrix in flattened form in ‘res’.

Note, the corresponding LLVM intrinsic, @llvm.matrix.transpose.*, does not support scalable vectors. Hence, this Op is only available for fixed-width vectors. Also see:

http://llvm.org/docs/LangRef.html#llvm-matrix-transpose-intrinsic

Example:

%1 = vector.flat_transpose %0 {columns = 4 : i32, rows = 4 : i32}
   : vector<16xf32> -> vector<16xf32>
Traits: AlwaysSpeculatableImplTrait

Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)

Effects: MemoryEffects::Effect{}

Attributes: ¶
Attribute	MLIR Type	Description
rows	::mlir::IntegerAttr	32-bit signless integer attribute
columns	::mlir::IntegerAttr	32-bit signless integer attribute
Operands: ¶
Operand	Description
matrix	fixed-length vector of signless integer or signed integer or index or floating-point values of ranks 1
Results: ¶
Result	Description
res	fixed-length vector of signless integer or signed integer or index or floating-point values of ranks 1