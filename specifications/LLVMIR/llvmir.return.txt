//===----------------------------------------------------------------------===//
// ReturnOp
//===----------------------------------------------------------------------===//

def LLVM_ReturnOp : LLVM_TerminatorOp<"return", [Pure, ReturnLike]> {
  let arguments = (ins Optional<LLVM_Type>:$arg);
  let assemblyFormat = "attr-dict ($arg^ `:` type($arg))?";

  let builders = [
    OpBuilder<(ins "ValueRange":$args), [{
      build($_builder, $_state, TypeRange(), args);
    }]>
  ];

  let hasVerifier = 1;

  string llvmInstName = "Ret";
  string llvmBuilder = [{
    if ($_numOperands != 0)
      builder.CreateRet($arg);
    else
      builder.CreateRetVoid();
  }];
  string mlirBuilder = [{
    FailureOr<SmallVector<Value>> mlirOperands =
      moduleImport.convertValues(llvmOperands);
    if (failed(mlirOperands))
      return failure();
    $_op = $_builder.create<LLVM::ReturnOp>($_location, *mlirOperands);
  }];
}

def LLVM_ResumeOp : LLVM_TerminatorOp<"resume"> {
  let arguments = (ins LLVM_Type:$value);
  let assemblyFormat = "$value attr-dict `:` type($value)";
  // Consistency of llvm.resume value types is checked in LLVMFuncOp::verify().
  let hasVerifier = false;
  string llvmInstName = "Resume";
  string llvmBuilder = [{ builder.CreateResume($value); }];
  string mlirBuilder = [{
    $_op = $_builder.create<LLVM::ResumeOp>($_location, $value);
  }];
}
def LLVM_UnreachableOp : LLVM_TerminatorOp<"unreachable"> {
  let assemblyFormat = "attr-dict";
  string llvmInstName = "Unreachable";
  string llvmBuilder = [{ builder.CreateUnreachable(); }];
  string mlirBuilder = [{
    $_op = $_builder.create<LLVM::UnreachableOp>($_location);
  }];
}

def LLVM_SwitchOp : LLVM_TerminatorOp<"switch",
    [AttrSizedOperandSegments,
     DeclareOpInterfaceMethods<BranchOpInterface>,
     DeclareOpInterfaceMethods<BranchWeightOpInterface>,
     Pure]> {
  let arguments = (ins
    AnySignlessInteger:$value,
    Variadic<AnyType>:$defaultOperands,
    VariadicOfVariadic<AnyType, "case_operand_segments">:$caseOperands,
    OptionalAttr<AnyIntElementsAttr>:$case_values,
    DenseI32ArrayAttr:$case_operand_segments,
    OptionalAttr<DenseI32ArrayAttr>:$branch_weights
  );
  let successors = (successor
    AnySuccessor:$defaultDestination,
    VariadicSuccessor<AnySuccessor>:$caseDestinations
  );

  let assemblyFormat = [{
    $value `:` type($value) `,`
    $defaultDestination (`(` $defaultOperands^ `:` type($defaultOperands) `)`)?
    custom<SwitchOpCases>(ref(type($value)), $case_values, $caseDestinations,
                                   $caseOperands, type($caseOperands))
    attr-dict
  }];
  let hasVerifier = 1;

  let builders = [
    OpBuilder<(ins "Value":$value,
      "Block *":$defaultDestination,
      "ValueRange":$defaultOperands,
      CArg<"ArrayRef<APInt>", "{}">:$caseValues,
      CArg<"BlockRange", "{}">:$caseDestinations,
      CArg<"ArrayRef<ValueRange>", "{}">:$caseOperands,
      CArg<"ArrayRef<int32_t>", "{}">:$branchWeights)>,
    OpBuilder<(ins "Value":$value,
      "Block *":$defaultDestination,
      "ValueRange":$defaultOperands,
      CArg<"ArrayRef<int32_t>", "{}">:$caseValues,
      CArg<"BlockRange", "{}">:$caseDestinations,
      CArg<"ArrayRef<ValueRange>", "{}">:$caseOperands,
      CArg<"ArrayRef<int32_t>", "{}">:$branchWeights)>,
    OpBuilder<(ins "Value":$value,
      "Block *":$defaultDestination,
      "ValueRange":$defaultOperands,
      CArg<"DenseIntElementsAttr", "{}">:$caseValues,
      CArg<"BlockRange", "{}">:$caseDestinations,
      CArg<"ArrayRef<ValueRange>", "{}">:$caseOperands,
      CArg<"ArrayRef<int32_t>", "{}">:$branchWeights)>,
    LLVM_TerminatorPassthroughOpBuilder
  ];

  let extraClassDeclaration = [{
    /// Return the operands for the case destination block at the given index.
    OperandRange getCaseOperands(unsigned index) {
      return getCaseOperands()[index];
    }

    /// Return a mutable range of operands for the case destination block at the
    /// given index.
    MutableOperandRange getCaseOperandsMutable(unsigned index) {
      return getCaseOperandsMutable()[index];
    }
  }];
}

////////////////////////////////////////////////////////////////////////////////
// Auxiliary operations (do not appear in LLVM IR but necessary for the dialect
// to work correctly).
////////////////////////////////////////////////////////////////////////////////

def LLVM_AddressOfOp : LLVM_Op<"mlir.addressof",
    [Pure, ConstantLike, DeclareOpInterfaceMethods<SymbolUserOpInterface>]> {
  let arguments = (ins FlatSymbolRefAttr:$global_name);
  let results = (outs LLVM_AnyPointer:$res);

  let summary = "Creates a pointer pointing to a global or a function";

  let description = [{
    Creates an SSA value containing a pointer to a global variable or constant
    defined by `llvm.mlir.global`. The global value can be defined after its
    first referenced. If the global value is a constant, storing into it is not
    allowed.

    Examples:

    ```mlir
    func @foo() {
      // Get the address of a global variable.
      %0 = llvm.mlir.addressof @const : !llvm.ptr

      // Use it as a regular pointer.
      %1 = llvm.load %0 : !llvm.ptr -> i32

      // Get the address of a function.
      %2 = llvm.mlir.addressof @foo : !llvm.ptr

      // The function address can be used for indirect calls.
      llvm.call %2() : !llvm.ptr, () -> ()
    }

    // Define the global.
    llvm.mlir.global @const(42 : i32) : i32
    ```
  }];

  let builders = [
    OpBuilder<(ins "GlobalOp":$global,
      CArg<"ArrayRef<NamedAttribute>", "{}">:$attrs),
    [{
      build($_builder, $_state,
            LLVM::LLVMPointerType::get($_builder.getContext(), global.getAddrSpace()),
            global.getSymName());
      $_state.addAttributes(attrs);
    }]>,
    OpBuilder<(ins "LLVMFuncOp":$func,
      CArg<"ArrayRef<NamedAttribute>", "{}">:$attrs),
    [{
      build($_builder, $_state,
            LLVM::LLVMPointerType::get($_builder.getContext()), func.getName());
      $_state.addAttributes(attrs);
    }]>
  ];

  let extraClassDeclaration = [{
    /// Return the llvm.mlir.global operation that defined the value referenced
    /// here.
    GlobalOp getGlobal(SymbolTableCollection &symbolTable);

    /// Return the llvm.func operation that is referenced here.
    LLVMFuncOp getFunction(SymbolTableCollection &symbolTable);
  }];

  let assemblyFormat = "$global_name attr-dict `:` qualified(type($res))";

  let hasFolder = 1;
}

def LLVM_GlobalOp : LLVM_Op<"mlir.global",
    [IsolatedFromAbove, SingleBlockImplicitTerminator<"ReturnOp">, Symbol]> {
  let arguments = (ins
    TypeAttr:$global_type,
    UnitAttr:$constant,
    StrAttr:$sym_name,
    Linkage:$linkage,
    UnitAttr:$dso_local,
    UnitAttr:$thread_local_,
    UnitAttr:$externally_initialized,
    OptionalAttr<AnyAttr>:$value,
    OptionalAttr<I64Attr>:$alignment,
    DefaultValuedAttr<ConfinedAttr<I32Attr, [IntNonNegative]>, "0">:$addr_space,
    OptionalAttr<UnnamedAddr>:$unnamed_addr,
    OptionalAttr<StrAttr>:$section,
    OptionalAttr<SymbolRefAttr>:$comdat,
    OptionalAttr<DIGlobalVariableExpressionArrayAttr>:$dbg_exprs,
    DefaultValuedAttr<Visibility, "mlir::LLVM::Visibility::Default">:$visibility_
  );
  let summary = "LLVM dialect global.";
  let description = [{
    Since MLIR allows for arbitrary operations to be present at the top level,
    global variables are defined using the `llvm.mlir.global` operation. Both
    global constants and variables can be defined, and the value may also be
    initialized in both cases.

    There are two forms of initialization syntax. Simple constants that can be
    represented as MLIR attributes can be given in-line:

    ```mlir
    llvm.mlir.global @variable(32.0 : f32) : f32
    ```

    This initialization and type syntax is similar to `llvm.mlir.constant` and
    may use two types: one for MLIR attribute and another for the LLVM value.
    These types must be compatible.

    More complex constants that cannot be represented as MLIR attributes can be
    given in an initializer region:

    ```mlir
    // This global is initialized with the equivalent of:
    //   i32* getelementptr (i32* @g2, i32 2)
    llvm.mlir.global constant @int_gep() : !llvm.ptr {
      %0 = llvm.mlir.addressof @g2 : !llvm.ptr
      %1 = llvm.mlir.constant(2 : i32) : i32
      %2 = llvm.getelementptr %0[%1]
         : (!llvm.ptr, i32) -> !llvm.ptr, i32
      // The initializer region must end with `llvm.return`.
      llvm.return %2 : !llvm.ptr
    }
    ```

    Only one of the initializer attribute or initializer region may be provided.

    `llvm.mlir.global` must appear at top-level of the enclosing module. It uses
    an @-identifier for its value, which will be uniqued by the module with
    respect to other @-identifiers in it.

    Examples:

    ```mlir
    // Global values use @-identifiers.
    llvm.mlir.global constant @cst(42 : i32) : i32

    // Non-constant values must also be initialized.
    llvm.mlir.global @variable(32.0 : f32) : f32

    // Strings are expected to be of wrapped LLVM i8 array type and do not
    // automatically include the trailing zero.
    llvm.mlir.global @string("abc") : !llvm.array<3 x i8>

    // For strings globals, the trailing type may be omitted.
    llvm.mlir.global constant @no_trailing_type("foo bar")

    // A complex initializer is constructed with an initializer region.
    llvm.mlir.global constant @int_gep() : !llvm.ptr {
      %0 = llvm.mlir.addressof @g2 : !llvm.ptr
      %1 = llvm.mlir.constant(2 : i32) : i32
      %2 = llvm.getelementptr %0[%1]
         : (!llvm.ptr, i32) -> !llvm.ptr, i32
      llvm.return %2 : !llvm.ptr
    }
    ```

    Similarly to functions, globals have a linkage attribute. In the custom
    syntax, this attribute is placed between `llvm.mlir.global` and the optional
    `constant` keyword. If the attribute is omitted, `external` linkage is
    assumed by default.

    Examples:

    ```mlir
    // A constant with internal linkage will not participate in linking.
    llvm.mlir.global internal constant @cst(42 : i32) : i32

    // By default, "external" linkage is assumed and the global participates in
    // symbol resolution at link-time.
    llvm.mlir.global @glob(0 : f32) : f32

    // Alignment is optional
    llvm.mlir.global private constant @y(dense<1.0> : tensor<8xf32>) : !llvm.array<8 x f32>
    ```

    Like global variables in LLVM IR, globals can have an (optional)
    alignment attribute using keyword `alignment`. The integer value of the
    alignment must be a positive integer that is a power of 2.

    Examples:

    ```mlir
    // Alignment is optional
    llvm.mlir.global private constant @y(dense<1.0> : tensor<8xf32>) { alignment = 32 : i64 } : !llvm.array<8 x f32>
    ```

  }];
  let regions = (region AnyRegion:$initializer);

  let builders = [
    OpBuilder<(ins "Type":$type, "bool":$isConstant, "Linkage":$linkage,
      "StringRef":$name, "Attribute":$value,
      CArg<"uint64_t", "0">:$alignment,
      CArg<"unsigned", "0">:$addrSpace,
      CArg<"bool", "false">:$dsoLocal,
      CArg<"bool", "false">:$thread_local_,
      CArg<"SymbolRefAttr", "{}">:$comdat,
      CArg<"ArrayRef<NamedAttribute>", "{}">:$attrs,
      CArg<"ArrayRef<Attribute>", "{}">:$dbgExprs)>
  ];

  let extraClassDeclaration = [{
    /// Return the LLVM type of the global.
    Type getType() {
      return getGlobalType();
    }
    /// Return the initializer attribute if it exists, or a null attribute.
    Attribute getValueOrNull() {
      return getValue().value_or(Attribute());
    }
    /// Return the initializer region. This may be empty, but if it is not it
    /// terminates in an `llvm.return` op with the initializer value.
    Region &getInitializerRegion() {
      return getOperation()->getRegion(0);
    }
    /// Return the initializer block. If the initializer region is empty this
    /// is nullptr. If it is not nullptr, it terminates with an `llvm.return`
    /// op with the initializer value.
    Block *getInitializerBlock() {
      return getInitializerRegion().empty() ?
        nullptr : &getInitializerRegion().front();
    }
  }];

  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
  let hasRegionVerifier = 1;
}

def LLVM_GlobalCtorsOp : LLVM_Op<"mlir.global_ctors", [
                           DeclareOpInterfaceMethods<SymbolUserOpInterface>]> {
  let arguments = (ins FlatSymbolRefArrayAttr
                   : $ctors, I32ArrayAttr
                   : $priorities);
  let summary = "LLVM dialect global_ctors.";
  let description = [{
    Specifies a list of constructor functions and priorities. The functions
    referenced by this array will be called in ascending order of priority (i.e.
    lowest first) when the module is loaded. The order of functions with the
    same priority is not defined. This operation is translated to LLVM's
    global_ctors global variable. The initializer functions are run at load
    time. The `data` field present in LLVM's global_ctors variable is not
    modeled here.

    Examples:

    ```mlir
    llvm.mlir.global_ctors {@ctor}

    llvm.func @ctor() {
      ...
      llvm.return
    }
    ```

  }];
  let assemblyFormat = "attr-dict";
  let hasVerifier = 1;
}

def LLVM_GlobalDtorsOp : LLVM_Op<"mlir.global_dtors", [
                           DeclareOpInterfaceMethods<SymbolUserOpInterface>]> {
  let arguments = (ins
    FlatSymbolRefArrayAttr:$dtors,
    I32ArrayAttr:$priorities
  );
  let summary = "LLVM dialect global_dtors.";
  let description = [{
    Specifies a list of destructor functions and priorities. The functions
    referenced by this array will be called in descending order of priority (i.e.
    highest first) when the module is unloaded. The order of functions with the
    same priority is not defined. This operation is translated to LLVM's
    global_dtors global variable. The `data` field present in LLVM's
    global_dtors variable is not modeled here.

    Examples:

    ```mlir
    llvm.func @dtor() {
      llvm.return
    }
    llvm.mlir.global_dtors {@dtor}
    ```

  }];
  let assemblyFormat = "attr-dict";
  let hasVerifier = 1;
}

def LLVM_ComdatSelectorOp : LLVM_Op<"comdat_selector", [Symbol]> {
  let arguments = (ins
    SymbolNameAttr:$sym_name,
    Comdat:$comdat
  );

  let summary = "LLVM dialect comdat selector declaration";

  let description = [{
    Provides access to object file COMDAT section/group functionality.

    Examples:
    ```mlir
    llvm.comdat @__llvm_comdat {
      llvm.comdat_selector @any any
    }
    llvm.mlir.global internal constant @has_any_comdat(1 : i64) comdat(@__llvm_comdat::@any) : i64
    ```
  }];
  let assemblyFormat = "$sym_name $comdat attr-dict";
}

def LLVM_ComdatOp : LLVM_Op<"comdat", [NoTerminator, NoRegionArguments, SymbolTable, Symbol]> {
  let arguments = (ins
    SymbolNameAttr:$sym_name
  );
  let summary = "LLVM dialect comdat region";

  let description = [{
    Provides access to object file COMDAT section/group functionality.

    Examples:
    ```mlir
    llvm.comdat @__llvm_comdat {
      llvm.comdat_selector @any any
    }
    llvm.mlir.global internal constant @has_any_comdat(1 : i64) comdat(@__llvm_comdat::@any) : i64
    ```
  }];
  let regions = (region SizedRegion<1>:$body);


  let skipDefaultBuilders = 1;
  let builders = [OpBuilder<(ins "StringRef":$symName)>];

  let assemblyFormat = "$sym_name $body attr-dict";
  let hasRegionVerifier = 1;
}

def LLVM_LLVMFuncOp : LLVM_Op<"func", [
    AutomaticAllocationScope, IsolatedFromAbove, FunctionOpInterface
  ]> {
  let summary = "LLVM dialect function.";

  let description = [{
    MLIR functions are defined by an operation that is not built into the IR
    itself. The LLVM dialect provides an `llvm.func` operation to define
    functions compatible with LLVM IR. These functions have LLVM dialect
    function type but use MLIR syntax to express it. They are required to have
    exactly one result type. LLVM function operation is intended to capture
    additional properties of LLVM functions, such as linkage and calling
    convention, that may be modeled differently by the built-in MLIR function.

    ```mlir
    // The type of @bar is !llvm<"i64 (i64)">
    llvm.func @bar(%arg0: i64) -> i64 {
      llvm.return %arg0 : i64
    }

    // Type type of @foo is !llvm<"void (i64)">
    // !llvm.void type is omitted
    llvm.func @foo(%arg0: i64) {
      llvm.return
    }

    // A function with `internal` linkage.
    llvm.func internal @internal_func() {
      llvm.return
    }
    ```
  }];

  let arguments = (ins
    StrAttr:$sym_name,
    OptionalAttr<StrAttr>:$sym_visibility,
    TypeAttrOf<LLVM_FunctionType>:$function_type,
    DefaultValuedAttr<Linkage, "Linkage::External">:$linkage,
    UnitAttr:$dso_local,
    DefaultValuedAttr<CConv, "CConv::C">:$CConv,
    OptionalAttr<SymbolRefAttr>:$comdat,
    OptionalAttr<UnitAttr>:$convergent,
    OptionalAttr<FlatSymbolRefAttr>:$personality,
    OptionalAttr<StrAttr>:$garbageCollector,
    OptionalAttr<ArrayAttr>:$passthrough,
    OptionalAttr<DictArrayAttr>:$arg_attrs,
    OptionalAttr<DictArrayAttr>:$res_attrs,
    OptionalAttr<I64Attr>:$function_entry_count,
    OptionalAttr<LLVM_MemoryEffectsAttr>:$memory_effects,
    DefaultValuedAttr<Visibility, "mlir::LLVM::Visibility::Default">:$visibility_,
    OptionalAttr<UnitAttr>:$arm_streaming,
    OptionalAttr<UnitAttr>:$arm_locally_streaming,
    OptionalAttr<UnitAttr>:$arm_streaming_compatible,
    OptionalAttr<UnitAttr>:$arm_new_za,
    OptionalAttr<UnitAttr>:$arm_in_za,
    OptionalAttr<UnitAttr>:$arm_out_za,
    OptionalAttr<UnitAttr>:$arm_inout_za,
    OptionalAttr<UnitAttr>:$arm_preserves_za,
    OptionalAttr<StrAttr>:$section,
    OptionalAttr<UnnamedAddr>:$unnamed_addr,
    OptionalAttr<I64Attr>:$alignment,
    OptionalAttr<LLVM_VScaleRangeAttr>:$vscale_range,
    OptionalAttr<FramePointerKindAttr>:$frame_pointer,
    OptionalAttr<StrAttr>:$target_cpu,
    OptionalAttr<StrAttr>:$tune_cpu,
    OptionalAttr<LLVM_TargetFeaturesAttr>:$target_features,
    OptionalAttr<BoolAttr>:$unsafe_fp_math,
    OptionalAttr<BoolAttr>:$no_infs_fp_math,
    OptionalAttr<BoolAttr>:$no_nans_fp_math,
    OptionalAttr<BoolAttr>:$approx_func_fp_math,
    OptionalAttr<BoolAttr>:$no_signed_zeros_fp_math,
    OptionalAttr<StrAttr>:$denormal_fp_math,
    OptionalAttr<StrAttr>:$denormal_fp_math_f32,
    OptionalAttr<StrAttr>:$fp_contract,
    OptionalAttr<UnitAttr>:$no_inline,
    OptionalAttr<UnitAttr>:$always_inline,
    OptionalAttr<UnitAttr>:$no_unwind,
    OptionalAttr<UnitAttr>:$will_return,
    OptionalAttr<UnitAttr>:$optimize_none,
    OptionalAttr<LLVM_VecTypeHintAttr>:$vec_type_hint,
    OptionalAttr<DenseI32ArrayAttr>:$work_group_size_hint,
    OptionalAttr<DenseI32ArrayAttr>:$reqd_work_group_size,
    OptionalAttr<I32Attr>:$intel_reqd_sub_group_size
  );

  let regions = (region AnyRegion:$body);

  let skipDefaultBuilders = 1;

  let builders = [
    OpBuilder<(ins "StringRef":$name, "Type":$type,
      CArg<"Linkage", "Linkage::External">:$linkage,
      CArg<"bool", "false">:$dsoLocal,
      CArg<"CConv", "CConv::C">:$cconv,
      CArg<"SymbolRefAttr", "{}">:$comdat,
      CArg<"ArrayRef<NamedAttribute>", "{}">:$attrs,
      CArg<"ArrayRef<DictionaryAttr>", "{}">:$argAttrs,
      CArg<"std::optional<uint64_t>", "{}">:$functionEntryCount)>
  ];

  let extraClassDeclaration = [{
    // Add an entry block to an empty function, and set up the block arguments
    // to match the signature of the function.
    Block *addEntryBlock(OpBuilder &builder);

    bool isVarArg() { return getFunctionType().isVarArg(); }

    /// Returns the argument types of this function.
    ArrayRef<Type> getArgumentTypes() { return getFunctionType().getParams(); }

    /// Returns the result types of this function.
    ArrayRef<Type> getResultTypes() {
      if (::llvm::isa<LLVM::LLVMVoidType>(getFunctionType().getReturnType()))
        return {};
      return getFunctionType().getReturnTypes();
    }

    /// Returns the callable region, which is the function body. If the function
    /// is external, returns null.
    Region *getCallableRegion();

    /// Returns true if the `no_inline` attribute is set, false otherwise.
    bool isNoInline() { return bool(getNoInlineAttr()); }

    /// Returns true if the `always_inline` attribute is set, false otherwise.
    bool isAlwaysInline() { return bool(getAlwaysInlineAttr()); }

    /// Returns true if the `optimize_none` attribute is set, false otherwise.
    bool isOptimizeNone() { return bool(getOptimizeNoneAttr()); }
  }];

  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
  let hasRegionVerifier = 1;
}

def LLVM_NoneTokenOp
    : LLVM_Op<"mlir.none", [Pure]> {
  let summary = "Defines a value containing an empty token to LLVM type.";
  let description = [{
    Unlike LLVM IR, MLIR does not have first-class token values. They must be
    explicitly created as SSA values using `llvm.mlir.none`. This operation has
    no operands or attributes, and returns a none token value of a wrapped LLVM IR
    pointer type.

    Examples:

    ```mlir
    %0 = llvm.mlir.none : !llvm.token
    ```
  }];

  string llvmBuilder = [{
    $res = llvm::ConstantTokenNone::get(builder.getContext());
  }];

  let results = (outs LLVM_TokenType:$res);
  let builders = [LLVM_OneResultOpBuilder];
  let assemblyFormat = "attr-dict `:` type($res)";
}

def LLVM_UndefOp : LLVM_Op<"mlir.undef", [Pure, ConstantLike]>,
                   LLVM_Builder<"$res = llvm::UndefValue::get($_resultType);"> {
  let summary = "Creates an undefined value of LLVM dialect type.";
  let description = [{
    Unlike LLVM IR, MLIR does not have first-class undefined values. Such values
    must be created as SSA values using `llvm.mlir.undef`. This operation has no
    operands or attributes. It creates an undefined value of the specified LLVM
    IR dialect type.

    Example:

    ```mlir
    // Create a structure with a 32-bit integer followed by a float.
    %0 = llvm.mlir.undef : !llvm.struct<(i32, f32)>
    ```
  }];
  let results = (outs LLVM_Type:$res);
  let builders = [LLVM_OneResultOpBuilder];
  let assemblyFormat = "attr-dict `:` type($res)";
  let hasFolder = 1;
}

def LLVM_PoisonOp : LLVM_Op<"mlir.poison", [Pure, ConstantLike]>,
                    LLVM_Builder<"$res = llvm::PoisonValue::get($_resultType);"> {
  let summary = "Creates a poison value of LLVM dialect type.";
  let description = [{
    Unlike LLVM IR, MLIR does not have first-class poison values. Such values
    must be created as SSA values using `llvm.mlir.poison`. This operation has
    no operands or attributes. It creates a poison value of the specified LLVM
    IR dialect type.

    Example:

    ```mlir
    // Create a poison value for a structure with a 32-bit integer followed
    // by a float.
    %0 = llvm.mlir.poison : !llvm.struct<(i32, f32)>
    ```
  }];
  let results = (outs LLVM_Type:$res);
  let builders = [LLVM_OneResultOpBuilder];
  let assemblyFormat = "attr-dict `:` type($res)";
  let hasFolder = 1;
}

def LLVM_ZeroOp
    : LLVM_Op<"mlir.zero", [Pure, ConstantLike]>,
      LLVM_Builder<"$res = llvm::Constant::getNullValue($_resultType);">
{
  let summary = "Creates a zero-initialized value of LLVM dialect type.";
  let description = [{
    Unlike LLVM IR, MLIR does not have first-class zero-initialized values.
    Such values must be created as SSA values using `llvm.mlir.zero`. This
    operation has no operands or attributes. It creates a zero-initialized
    value of the specified LLVM IR dialect type.

    Example:

    ```mlir
    // Create a zero-initialized value for a structure with a 32-bit integer
    // followed by a float.
    %0 = llvm.mlir.zero : !llvm.struct<(i32, f32)>
    ```
  }];
  let results = (outs LLVM_Type:$res);
  let builders = [LLVM_OneResultOpBuilder];
  let assemblyFormat = "attr-dict `:` type($res)";
  let hasVerifier = 1;
  let hasFolder = 1;
}

def LLVM_ConstantOp
    : LLVM_Op<"mlir.constant", [Pure, ConstantLike]>,
      LLVM_Builder<[{$res = getLLVMConstant($_resultType, $value, $_location,
                                            moduleTranslation);}]>
{
  let summary = "Defines a constant of LLVM type.";
  let description = [{
    Unlike LLVM IR, MLIR does not have first-class constant values. Therefore,
    all constants must be created as SSA values before being used in other
    operations. `llvm.mlir.constant` creates such values for scalars, vectors,
    strings, and structs. It has a mandatory `value` attribute whose type
    depends on the type of the constant value. The type of the constant value
    must correspond to the attribute type converted to LLVM IR type.

    When creating constant scalars, the `value` attribute must be either an
    integer attribute or a floating point attribute. The type of the attribute
    may be omitted for `i64` and `f64` types that are implied.

    When creating constant vectors, the `value` attribute must be either an
    array attribute, a dense attribute, or a sparse attribute that contains
    integers or floats. The number of elements in the result vector must match
    the number of elements in the attribute.

    When creating constant strings, the `value` attribute must be a string
    attribute. The type of the constant must be an LLVM array of `i8`s, and the
    length of the array must match the length of the attribute.

    When creating constant structs, the `value` attribute must be an array
    attribute that contains integers or floats. The type of the constant must be
    an LLVM struct type. The number of fields in the struct must match the
    number of elements in the attribute, and the type of each LLVM struct field
    must correspond to the type of the corresponding attribute element converted
    to LLVM IR.

    Examples:

    ```mlir
    // Integer constant, internal i32 is mandatory
    %0 = llvm.mlir.constant(42 : i32) : i32

    // It's okay to omit i64.
    %1 = llvm.mlir.constant(42) : i64

    // Floating point constant.
    %2 = llvm.mlir.constant(42.0 : f32) : f32

    // Splat dense vector constant.
    %3 = llvm.mlir.constant(dense<1.0> : vector<4xf32>) : vector<4xf32>
    ```
  }];

  let arguments = (ins AnyAttr:$value);
  let results = (outs LLVM_Type:$res);

  let assemblyFormat = "`(` $value `)` attr-dict `:` type($res)";

  let builders = [
    LLVM_OneResultOpBuilder,
    OpBuilder<(ins "Type":$type, "int64_t":$value), [{
      build($_builder, $_state, type, $_builder.getIntegerAttr(type, value));
    }]>,
    OpBuilder<(ins "Type":$type, "const APInt &":$value), [{
      build($_builder, $_state, type, $_builder.getIntegerAttr(type, value));
    }]>,
    OpBuilder<(ins "Type":$type, "const APFloat &":$value), [{
      build($_builder, $_state, type, $_builder.getFloatAttr(type, value));
    }]>,
    OpBuilder<(ins "TypedAttr":$value), [{
      build($_builder, $_state, value.getType(), value);
    }]>
  ];

  let extraClassDeclaration = [{
    /// Whether the constant op can be constructed with a particular value and
    /// type.
    static bool isBuildableWith(Attribute value, Type type);

    /// Build the constant op with `value` and `type` if possible, otherwise
    /// returns null.
    static ConstantOp materialize(OpBuilder &builder, Attribute value,
                                  Type type, Location loc);
  }];

  let hasFolder = 1;
  let hasVerifier = 1;
}

// Atomic operations.
//

def LLVM_AtomicRMWType
    : AnyTypeOf<[LLVM_AnyFloat, LLVM_AnyPointer, AnySignlessInteger, LLVM_AnyFixedVector]>;

def LLVM_AtomicRMWOp : LLVM_MemAccessOpBase<"atomicrmw", [
      TypesMatchWith<"result #0 and operand #1 have the same type",
                     "val", "res", "$_self">]> {
  dag args = (ins AtomicBinOp:$bin_op,
              LLVM_AnyPointer:$ptr,
              LLVM_AtomicRMWType:$val, AtomicOrdering:$ordering,
              OptionalAttr<StrAttr>:$syncscope,
              OptionalAttr<I64Attr>:$alignment,
              UnitAttr:$volatile_);
  // Append the aliasing related attributes defined in LLVM_MemAccessOpBase.
  let arguments = !con(args, aliasAttrs);
  let results = (outs LLVM_AtomicRMWType:$res);
  let assemblyFormat = [{
    (`volatile` $volatile_^)? $bin_op $ptr `,` $val
    (`syncscope` `(` $syncscope^ `)`)? $ordering attr-dict `:`
    qualified(type($ptr)) `,` type($val)
  }];
  string llvmInstName = "AtomicRMW";
  string llvmBuilder = [{
    auto *inst = builder.CreateAtomicRMW(
        convertAtomicBinOpToLLVM($bin_op), $ptr, $val, llvm::MaybeAlign(),
        convertAtomicOrderingToLLVM($ordering));
    $res = inst;
  }] # setVolatileCode
     # setSyncScopeCode
     # setAlignmentCode
     # setAccessGroupsMetadataCode
     # setAliasAnalysisMetadataCode;
  string mlirBuilder = [{
    auto *atomicInst = cast<llvm::AtomicRMWInst>(inst);
    unsigned alignment = atomicInst->getAlign().value();
    $res = $_builder.create<LLVM::AtomicRMWOp>($_location,
        convertAtomicBinOpFromLLVM(atomicInst->getOperation()), $ptr, $val,
        convertAtomicOrderingFromLLVM(atomicInst->getOrdering()),
        getLLVMSyncScope(atomicInst), alignment, atomicInst->isVolatile());
  }];
  list<int> llvmArgIndices = [-1, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1];
  let builders = [
    OpBuilder<(ins "LLVM::AtomicBinOp":$binOp, "Value":$ptr, "Value":$val,
      "LLVM::AtomicOrdering":$ordering,
      CArg<"StringRef", "StringRef()">:$syncscope,
      CArg<"unsigned", "0">:$alignment, CArg<"bool", "false">:$isVolatile
    )>
  ];
  let hasVerifier = 1;
}

def LLVM_AtomicCmpXchgType : AnyTypeOf<[AnySignlessInteger, LLVM_AnyPointer]>;

def LLVM_AtomicCmpXchgOp : LLVM_MemAccessOpBase<"cmpxchg", [
      TypesMatchWith<"operand #1 and operand #2 have the same type",
                     "val", "cmp", "$_self">,
      TypesMatchWith<"result #0 has an LLVM struct type consisting of "
                     "the type of operand #2 and a bool", "val", "res",
                     "getValAndBoolStructType($_self)">]> {
  dag args = (ins LLVM_AnyPointer:$ptr,
              LLVM_AtomicCmpXchgType:$cmp, LLVM_AtomicCmpXchgType:$val,
              AtomicOrdering:$success_ordering,
              AtomicOrdering:$failure_ordering,
              OptionalAttr<StrAttr>:$syncscope,
              OptionalAttr<I64Attr>:$alignment,
              UnitAttr:$weak,
              UnitAttr:$volatile_);
  // Append the aliasing related attributes defined in LLVM_MemAccessOpBase.
  let arguments = !con(args, aliasAttrs);
  let results = (outs LLVM_AnyStruct:$res);
  let assemblyFormat = [{
    (`weak` $weak^)? (`volatile` $volatile_^)? $ptr `,` $cmp `,` $val
    (`syncscope` `(` $syncscope^ `)`)? $success_ordering $failure_ordering
    attr-dict `:` qualified(type($ptr)) `,` type($val)
  }];
  string llvmInstName = "AtomicCmpXchg";
  string llvmBuilder = [{
    auto *inst = builder.CreateAtomicCmpXchg($ptr, $cmp, $val,
        llvm::MaybeAlign(), convertAtomicOrderingToLLVM($success_ordering),
        convertAtomicOrderingToLLVM($failure_ordering));
    $res = inst;
    inst->setWeak($weak);
  }] # setVolatileCode
     # setSyncScopeCode
     # setAlignmentCode
     # setAccessGroupsMetadataCode
     # setAliasAnalysisMetadataCode;
  string mlirBuilder = [{
    auto *cmpXchgInst = cast<llvm::AtomicCmpXchgInst>(inst);
    unsigned alignment = cmpXchgInst->getAlign().value();
    $res = $_builder.create<LLVM::AtomicCmpXchgOp>(
      $_location, $ptr, $cmp, $val,
      convertAtomicOrderingFromLLVM(cmpXchgInst->getSuccessOrdering()),
      convertAtomicOrderingFromLLVM(cmpXchgInst->getFailureOrdering()),
      getLLVMSyncScope(cmpXchgInst), alignment, cmpXchgInst->isWeak(),
      cmpXchgInst->isVolatile());
  }];
  let builders = [
    OpBuilder<(ins "Value":$ptr, "Value":$cmp, "Value":$val,
      "LLVM::AtomicOrdering":$successOrdering,
      "LLVM::AtomicOrdering":$failureOrdering,
      CArg<"StringRef", "StringRef()">:$syncscope,
      CArg<"unsigned", "0">:$alignment, CArg<"bool", "false">:$isWeak,
      CArg<"bool", "false">:$isVolatile
    )>
  ];
  let hasVerifier = 1;
}

def LLVM_FenceOp : LLVM_Op<"fence">, LLVM_MemOpPatterns {
  let arguments = (ins AtomicOrdering:$ordering,
                   OptionalAttr<StrAttr>:$syncscope);
  let assemblyFormat = "(`syncscope` `(` $syncscope^ `)`)? $ordering attr-dict";
  string llvmInstName = "Fence";
  let llvmBuilder = [{
    auto *inst = builder.CreateFence(convertAtomicOrderingToLLVM($ordering));
  }] # setSyncScopeCode;
  string mlirBuilder = [{
    llvm::FenceInst *fenceInst = cast<llvm::FenceInst>(inst);
    $_op = $_builder.create<LLVM::FenceOp>(
      $_location,
      convertAtomicOrderingFromLLVM(fenceInst->getOrdering()),
      getLLVMSyncScope(fenceInst));
  }];
  let builders = [
    LLVM_VoidResultTypeOpBuilder,
    LLVM_ZeroResultOpBuilder,
    OpBuilder<(ins "LLVM::AtomicOrdering":$ordering,
      CArg<"StringRef", "StringRef()">:$syncscope)>
  ];
  let hasVerifier = 1;
}

def LLVM_InlineAsmOp : LLVM_Op<"inline_asm", [DeclareOpInterfaceMethods<MemoryEffectsOpInterface>]> {
  let description = [{
    The InlineAsmOp mirrors the underlying LLVM semantics with a notable
    exception: the embedded `asm_string` is not allowed to define or reference
    any symbol or any global variable: only the operands of the op may be read,
    written, or referenced.
    Attempting to define or reference any symbol or any global behavior is
    considered undefined behavior at this time.
  }];
  let arguments = (
    ins Variadic<LLVM_Type>:$operands,
        StrAttr:$asm_string,
        StrAttr:$constraints,
        UnitAttr:$has_side_effects,
        UnitAttr:$is_align_stack,
        OptionalAttr<
          DefaultValuedAttr<AsmATTOrIntel, "AsmDialect::AD_ATT">>:$asm_dialect,
        OptionalAttr<ArrayAttr>:$operand_attrs);

  let results = (outs Optional<LLVM_Type>:$res);

  let assemblyFormat = [{
    (`has_side_effects` $has_side_effects^)?
    (`is_align_stack` $is_align_stack^)?
    (`asm_dialect` `=` $asm_dialect^)?
    (`operand_attrs` `=` $operand_attrs^)?
    attr-dict
    $asm_string `,` $constraints
    operands `:` functional-type(operands, results)
   }];

  let extraClassDeclaration = [{
    static StringRef getElementTypeAttrName() {
      return "elementtype";
    }
  }];
}

//===--------------------------------------------------------------------===//
// CallIntrinsicOp
//===--------------------------------------------------------------------===//

def LLVM_CallIntrinsicOp
    : LLVM_Op<"call_intrinsic",
              [AttrSizedOperandSegments,
               DeclareOpInterfaceMethods<FastmathFlagsInterface>]> {
  let summary = "Call to an LLVM intrinsic function.";
  let description = [{
    Call the specified llvm intrinsic. If the intrinsic is overloaded, use
    the MLIR function type of this op to determine which intrinsic to call.
  }];
  let arguments = (ins StrAttr:$intrin, Variadic<LLVM_Type>:$args,
                       DefaultValuedAttr<LLVM_FastmathFlagsAttr,
                                         "{}">:$fastmathFlags,
                       VariadicOfVariadic<LLVM_Type,
                                          "op_bundle_sizes">:$op_bundle_operands,
                       DenseI32ArrayAttr:$op_bundle_sizes,
                       DefaultValuedProperty<
                         ArrayProperty<StringProperty, "operand bundle tags">,
                         "ArrayRef<std::string>{}",
                         "SmallVector<std::string>{}"
                       >:$op_bundle_tags);
  let results = (outs Optional<LLVM_Type>:$results);
  let llvmBuilder = [{
    return convertCallLLVMIntrinsicOp(op, builder, moduleTranslation);
  }];
  let assemblyFormat = [{
    $intrin `(` $args `)`
    ( custom<OpBundles>($op_bundle_operands, type($op_bundle_operands),
                        $op_bundle_tags)^ )?
    `:` functional-type($args, $results)
    attr-dict
  }];

  let builders = [
    OpBuilder<(ins "StringAttr":$intrin, "ValueRange":$args)>,
    OpBuilder<(ins "StringAttr":$intrin, "ValueRange":$args, "FastmathFlagsAttr":$fastMathFlags)>,
    OpBuilder<(ins "Type": $resultType, "StringAttr":$intrin, "ValueRange":$args)>,
    OpBuilder<(ins "TypeRange": $resultTypes, "StringAttr":$intrin, "ValueRange":$args, "FastmathFlagsAttr":$fastMathFlags)>
  ];

  let hasVerifier = 1;
}

def LLVM_LinkerOptionsOp
    : LLVM_Op<"linker_options"> {
  let summary = "Options to pass to the linker when the object file is linked";
  let description = [{
    Pass the given options to the linker when the resulting object file is linked.
    This is used extensively on Windows to determine the C runtime that the object
    files should link against.

    Examples:
    ```mlir
    // Link against the MSVC static threaded CRT.
    llvm.linker_options ["/DEFAULTLIB:", "libcmt"]

    // Link against aarch64 compiler-rt builtins
    llvm.linker_options ["-l", "clang_rt.builtins-aarch64"]
    ```
  }];
  let arguments  = (ins StrArrayAttr:$options);
  let assemblyFormat = [{
    $options attr-dict
  }];

  let llvmBuilder = [{
    convertLinkerOptionsOp($options, builder, moduleTranslation);
  }];

  let hasVerifier = 1;
}

#endif // LLVMIR_OPS
