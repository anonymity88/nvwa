//===----------------------------------------------------------------------===//
// GenericAtomicRMWOp
//===----------------------------------------------------------------------===//

def GenericAtomicRMWOp : MemRef_Op<"generic_atomic_rmw", [
      SingleBlockImplicitTerminator<"AtomicYieldOp">,
      TypesMatchWith<"result type matches element type of memref",
                     "memref", "result",
                     "::llvm::cast<MemRefType>($_self).getElementType()">
    ]> {
  let summary = "atomic read-modify-write operation with a region";
  let description = [{
    The `memref.generic_atomic_rmw` operation provides a way to perform a
    read-modify-write sequence that is free from data races. The memref operand
    represents the buffer that the read and write will be performed against, as
    accessed by the specified indices. The arity of the indices is the rank of
    the memref. The result represents the latest value that was stored. The
    region contains the code for the modification itself. The entry block has
    a single argument that represents the value stored in `memref[indices]`
    before the write is performed. No side-effecting ops are allowed in the
    body of `GenericAtomicRMWOp`.

    Example:

    ```mlir
    %x = memref.generic_atomic_rmw %I[%i] : memref<10xf32> {
      ^bb0(%current_value : f32):
        %c1 = arith.constant 1.0 : f32
        %inc = arith.addf %c1, %current_value : f32
        memref.atomic_yield %inc : f32
    }
    ```
  }];

  let arguments = (ins
      Arg<MemRefOf<[AnySignlessInteger, AnyFloat]>, "the reference to read from and write to", [MemRead, MemWrite]>:$memref,
      Variadic<Index>:$indices);

  let results = (outs
      AnyTypeOf<[AnySignlessInteger, AnyFloat]>:$result);

  let regions = (region AnyRegion:$atomic_body);

  let skipDefaultBuilders = 1;
  let builders = [OpBuilder<(ins "Value":$memref, "ValueRange":$ivs)>];

  let extraClassDeclaration = [{
    // TODO: remove post migrating callers.
    Region &body() { return getRegion(); }

    // The value stored in memref[ivs].
    Value getCurrentValue() {
      return getRegion().getArgument(0);
    }
    MemRefType getMemRefType() {
      return ::llvm::cast<MemRefType>(getMemref().getType());
    }
  }];
  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
}

def AtomicYieldOp : MemRef_Op<"atomic_yield", [
      HasParent<"GenericAtomicRMWOp">,
      Pure,
      Terminator
    ]> {
  let summary = "yield operation for GenericAtomicRMWOp";
  let description = [{
    "memref.atomic_yield" yields an SSA value from a
    GenericAtomicRMWOp region.
  }];

  let arguments = (ins AnyType:$result);
  let assemblyFormat = "$result attr-dict `:` type($result)";
  let hasVerifier = 1;
}

