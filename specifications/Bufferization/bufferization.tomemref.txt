//===----------------------------------------------------------------------===//
// ToMemrefOp
//===----------------------------------------------------------------------===//

def Bufferization_ToMemrefOp : Bufferization_Op<"to_memref", [
    BufferizableOpInterface,
    SameOperandsAndResultShape,
    SameOperandsAndResultElementType,
    Pure,
    TypesMatchWith<"type of 'tensor' is the tensor equivalent of 'memref'",
                   "memref", "tensor",
                   "memref::getTensorTypeFromMemRefType($_self)">
  ]> {
  let summary = "cast a tensor to memref";
  let description = [{
    An operation that returns the future buffer of a `tensor`.

    ```mlir
    // Result type is memref<4x?xf32, #layout, 0>
    %m = bufferization.to_memref %t : memref<4x?xf32, #layout, 0>
    ```

    This operation is a specialized variant of the built-in
    `unrealized_conversion_cast` and is used to make sure that the IR stays
    valid at any point during the bufferization.

    The `read_only` attribute can optionally be set, indicating to the
    bufferization that the buffer returned by this op (or an alias created from
    the returned buffer) will not be written to.
  }];

  let arguments = (ins AnyTensor:$tensor, UnitAttr:$read_only);
  let results = (outs AnyRankedOrUnrankedMemRef:$memref);

  let extraClassDeclaration = [{
    //===------------------------------------------------------------------===//
    // BufferizableOpInterface implementation
    //===------------------------------------------------------------------===//

    // Note: ToMemrefOp / ToTensorOp are temporary ops that are inserted at the
    // bufferization boundary. When One-Shot bufferization is complete, there
    // should be no such ops left over. If `allowUnknownOps` (or after running a
    // partial bufferization pass), such ops may be part of the resulting IR,
    // but such IR may no longer be analyzable by One-Shot analysis.

    bool bufferizesToMemoryRead(OpOperand &opOperand,
                                const AnalysisState &state) const {
      // It is unknown whether the resulting memref will be read or not.
      return true;
    }

    bool bufferizesToMemoryWrite(OpOperand &opOperand,
                                 const AnalysisState &state) {
      return !getReadOnly();
    }

    AliasingValueList getAliasingValues(
        OpOperand &opOperand, const AnalysisState &state) const {
      return {};
    }

    LogicalResult bufferize(RewriterBase &rewriter,
                            const BufferizationOptions &options);
  }];

  let assemblyFormat = [{
    $tensor (`read_only` $read_only^)? attr-dict `:` type($memref)
  }];

  let hasFolder = 1;
  let hasCanonicalizer = 1;
}

def Bufferization_DeallocOp : Bufferization_Op<"dealloc", [
    AttrSizedOperandSegments, DeclareOpInterfaceMethods<InferTypeOpInterface>
  ]> {
  let summary = "deallocates the given memrefs if no alias is retained";
  let description = [{
    This operation deallocates each of the given memrefs if there is no alias
    to that memref in the list of retained memrefs and the corresponding
    condition value is set. This condition can be used to indicate and pass on
    ownership of memref values (or in other words, the responsibility of
    deallocating that memref). If two memrefs alias each other, only one will be
    deallocated to avoid double free situations.

    The number of variadic `memref` operands (the memrefs to be deallocated)
    must equal the number of variadic `condition` operands and correspond to
    each other element-wise.

    The `memref` operands must be the originally allocated memrefs, however, the
    `retained` memref operands may be arbitrary memrefs.

    This operation returns a variadic number of `updatedConditions` operands,
    one updated condition per retained memref. An updated condition indicates
    the ownership of the respective retained memref. It is computed as the
    disjunction of all `conditions` operands where the corresponding to
    `memrefs` operand aliases with the retained memref. If the retained memref
    has no aliases among `memrefs`, the resulting updated condition is 'false'.
    This is because all memrefs that need to be deallocated within one basic
    block should be added to the same `bufferization.dealloc` operation at the
    end of the block; if no aliasing memref is present, then it does not have to
    be deallocated and thus we don't need to claim ownership. If the memrefs to
    be deallocated are split over multiple dealloc operations (e.g., to avoid
    aliasing checks at runtime between the `memref` operands), then the results
    have to be manually combined using an `arith.ori` operation and all of them
    still require the same list of `retained` memref operands unless the
    (potentially empty) set of aliasing memrefs can be determined statically. In
    that case, the `updatedCondition` operand can be replaced accordingly (e.g.,
    by a canonicalizer).

    Example:
    ```mlir
    %0:3 = bufferization.dealloc (%a0, %a1 : memref<2xf32>, memref<4xi32>)
      if (%cond0, %cond1) retain (%r0, %r1, %r2 : memref<?xf32>, memref<f64>,
      memref<2xi32>)
    ```
    Deallocation will be called on `%a0` if `%cond0` is 'true' and neither
    `%r0`, `%r1`, or `%r2` are aliases of `%a0`. `%a1` will be deallocated when
    `%cond1` is set to 'true' and none of `%r0`, %r1`, `%r2`, and `%a0` are
    aliases.

    Note that this can be an expensive operation if there are many operands that
    cannot be optimized away. The runtime cost of this operation (assuming that
    nothing is optimized away) is `O(|memrefs|^2+|memrefs|*|retained|)`. The
    cost in terms of memory space is `O(|memrefs|+|retained|)`. As a result, it
    is recommended to place it carefully in the IR such that most operands can
    be optimized away by running the `buffer-deallocation-simplification` pass.
  }];

  let arguments = (ins Variadic<AnyRankedOrUnrankedMemRef>:$memrefs,
                       Variadic<I1>:$conditions,
                       Variadic<AnyRankedOrUnrankedMemRef>:$retained);
  let results = (outs Variadic<I1>:$updatedConditions);

  let assemblyFormat = [{
    (` ``(` $memrefs^ `:` type($memrefs) `)` `if` ` ` `(` $conditions `)` )?
    (`retain` ` ` `(` $retained^ `:` type($retained) `)` )? attr-dict
  }];

  let hasVerifier = 1;
  let hasCanonicalizer = 1;
}

#endif // BUFFERIZATION_OPS
