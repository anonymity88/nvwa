//===----------------------------------------------------------------------===//
// ReallocOp
//===----------------------------------------------------------------------===//


def MemRef_ReallocOp : MemRef_Op<"realloc"> {
  let summary = "memory reallocation operation";
  let description = [{
    The `realloc` operation changes the size of a memory region. The memory
    region is specified by a 1D source memref and the size of the new memory
    region is specified by a 1D result memref type and an optional dynamic Value
    of `Index` type. The source and the result memref must be in the same memory
    space and have the same element type.

    The operation may move the memory region to a new location. In this case,
    the content of the memory block is preserved up to the lesser of the new
    and old sizes. If the new size if larger, the value of the extended memory
    is undefined. This is consistent with the ISO C realloc.

    The operation returns an SSA value for the memref.

    Example:

    ```mlir
    %0 = memref.realloc %src : memref<64xf32> to memref<124xf32>
    ```

    The source memref may have a dynamic shape, in which case, the compiler will
    generate code to extract its size from the runtime data structure for the
    memref.

    ```mlir
    %1 = memref.realloc %src : memref<?xf32> to memref<124xf32>
    ```

    If the result memref has a dynamic shape, a result dimension operand is
    needed to spefify its dynamic dimension. In the example below, the ssa value
    '%d' specifies the unknown dimension of the result memref.

    ```mlir
    %2 = memref.realloc %src(%d) : memref<?xf32> to memref<?xf32>
    ```

    An optional `alignment` attribute may be specified to ensure that the
    region of memory that will be indexed is aligned at the specified byte
    boundary.  This is consistent with the fact that memref.alloc supports such
    an optional alignment attribute. Note that in ISO C standard, neither alloc
    nor realloc supports alignment, though there is aligned_alloc but not
    aligned_realloc.

    ```mlir
    %3 = memref.realloc %src {alignment = 8} : memref<64xf32> to memref<124xf32>
    ```

    Referencing the memref through the old SSA value after realloc is undefined
    behavior.

    ```mlir
    %new = memref.realloc %old : memref<64xf32> to memref<124xf32>
    %4 = memref.load %new[%index]   // ok
    %5 = memref.load %old[%index]   // undefined behavior
    ```
  }];

  // Note that we conceptually mark the operands as freeing the incoming
  // memref and allocating the outcoming memref, even though this may not
  // physically happen on each execution.

  let arguments = (ins Arg<MemRefRankOf<[AnyType], [1]>, "",
                                        [MemFreeAt<0, FullEffect>]>:$source,
                   Optional<Index>:$dynamicResultSize,
                   ConfinedAttr<OptionalAttr<I64Attr>,
                                [IntMinValue<0>]>:$alignment);

  let results = (outs Res<MemRefRankOf<[AnyType], [1]>, "",
                                       [MemAlloc<DefaultResource, 1,
                                                 FullEffect>]>);

  let builders = [
    OpBuilder<(ins "MemRefType":$resultType,
                  "Value":$source,
                  CArg<"Value", "Value()">:$dynamicResultSize), [{
      return build($_builder, $_state, resultType, source, dynamicResultSize,
                   IntegerAttr());
    }]>];

    let extraClassDeclaration = [{
    /// The result of a realloc is always a memref.
    MemRefType getType() { return ::llvm::cast<MemRefType>(getResult().getType()); }
  }];

  let assemblyFormat = [{
    $source (`(` $dynamicResultSize^ `)`)? attr-dict
    `:` type($source) `to` type(results)
  }];

  let hasCanonicalizer = 1;
  let hasVerifier = 1;
}

