llvm.store (LLVM::StoreOp) ¶
Syntax:

operation ::= `llvm.store` (`volatile` $volatile_^)? $value `,` $addr
              (`atomic` (`syncscope` `(` $syncscope^ `)`)? $ordering^)?
              (`invariant_group` $invariantGroup^)?
              attr-dict `:` type($value) `,` qualified(type($addr))
The store operation is used to write to memory. A store may be marked as atomic, volatile, and/or nontemporal, and takes a number of optional attributes that specify aliasing information.

An atomic store only supports a limited set of pointer, integer, and floating point types, and requires an explicit alignment.

Examples:

// A volatile store of a float variable.
llvm.store volatile %val, %ptr : f32, !llvm.ptr

// A nontemporal store of a float variable.
llvm.store %val, %ptr {nontemporal} : f32, !llvm.ptr

// An atomic store of an integer variable.
llvm.store %val, %ptr atomic monotonic {alignment = 8 : i64}
    : i64, !llvm.ptr
See the following link for more details: https://llvm.org/docs/LangRef.html#store-instruction

Interfaces: AccessGroupOpInterface, AliasAnalysisOpInterface, DestructurableAccessorOpInterface, MemoryEffectOpInterface, PromotableMemOpInterface, SafeMemorySlotAccessOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
alignment	::mlir::IntegerAttr	64-bit signless integer attribute
volatile_	::mlir::UnitAttr	unit attribute
nontemporal	::mlir::UnitAttr	unit attribute
invariantGroup	::mlir::UnitAttr	unit attribute
ordering	::mlir::LLVM::AtomicOrderingAttr	
Atomic ordering for LLVM's memory model
syncscope	::mlir::StringAttr	string attribute
access_groups	::mlir::ArrayAttr	LLVM dialect access group metadata array
alias_scopes	::mlir::ArrayAttr	LLVM dialect alias scope array
noalias_scopes	::mlir::ArrayAttr	LLVM dialect alias scope array
tbaa	::mlir::ArrayAttr	LLVM dialect TBAA tag metadata array
Operands: ¶
Operand	Description
value	LLVM type with size
addr	LLVM pointer type