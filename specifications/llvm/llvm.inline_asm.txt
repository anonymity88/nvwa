llvm.inline_asm (LLVM::InlineAsmOp) ¶
Syntax:

operation ::= `llvm.inline_asm` (`has_side_effects` $has_side_effects^)?
              (`is_align_stack` $is_align_stack^)?
              (`asm_dialect` `=` $asm_dialect^)?
              (`operand_attrs` `=` $operand_attrs^)?
              attr-dict
              $asm_string `,` $constraints
              operands `:` functional-type(operands, results)
The InlineAsmOp mirrors the underlying LLVM semantics with a notable exception: the embedded asm_string is not allowed to define or reference any symbol or any global variable: only the operands of the op may be read, written, or referenced. Attempting to define or reference any symbol or any global behavior is considered undefined behavior at this time.

Interfaces: MemoryEffectOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
asm_string	::mlir::StringAttr	string attribute
constraints	::mlir::StringAttr	string attribute
has_side_effects	::mlir::UnitAttr	unit attribute
is_align_stack	::mlir::UnitAttr	unit attribute
asm_dialect	::mlir::LLVM::AsmDialectAttr	
ATT (0) or Intel (1) asm dialect
operand_attrs	::mlir::ArrayAttr	array attribute
Operands: ¶
Operand	Description
operands	variadic of LLVM dialect-compatible type
Results: ¶
Result	Description
res	LLVM dialect-compatible type