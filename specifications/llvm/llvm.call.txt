llvm.call (LLVM::CallOp) ¶
Call to an LLVM function.

In LLVM IR, functions may return either 0 or 1 value. LLVM IR dialect implements this behavior by providing a variadic call operation for 0- and 1-result functions. Even though MLIR supports multi-result functions, LLVM IR dialect disallows them.

The call instruction supports both direct and indirect calls. Direct calls start with a function name (@-prefixed) and indirect calls start with an SSA value (%-prefixed). The direct callee, if present, is stored as a function attribute callee. For indirect calls, the callee is of !llvm.ptr type and is stored as the first value in callee_operands. If and only if the callee is a variadic function, the var_callee_type attribute must carry the variadic LLVM function type. The trailing type list contains the optional indirect callee type and the MLIR function type, which differs from the LLVM function type that uses an explicit void type to model functions that do not return a value.

Examples:

// Direct call without arguments and with one result.
%0 = llvm.call @foo() : () -> (f32)

// Direct call with arguments and without a result.
llvm.call @bar(%0) : (f32) -> ()

// Indirect call with an argument and without a result.
%1 = llvm.mlir.addressof @foo : !llvm.ptr
llvm.call %1(%0) : !llvm.ptr, (f32) -> ()

// Direct variadic call.
llvm.call @printf(%0, %1) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i32) -> i32

// Indirect variadic call
llvm.call %1(%0) vararg(!llvm.func<void (...)>) : !llvm.ptr, (i32) -> ()
Traits: AttrSizedOperandSegments

Interfaces: AccessGroupOpInterface, AliasAnalysisOpInterface, BranchWeightOpInterface, CallOpInterface, FastmathFlagsInterface, SymbolUserOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
var_callee_type	::mlir::TypeAttr	type attribute of LLVM function type
callee	::mlir::FlatSymbolRefAttr	flat symbol reference attribute
fastmathFlags	::mlir::LLVM::FastmathFlagsAttr	
LLVM fastmath flags
branch_weights	::mlir::DenseI32ArrayAttr	i32 dense array attribute
CConv	::mlir::LLVM::CConvAttr	LLVM Calling Convention specification
TailCallKind	::mlir::LLVM::TailCallKindAttr	LLVM Calling Convention specification
memory_effects	::mlir::LLVM::MemoryEffectsAttr	
convergent	::mlir::UnitAttr	unit attribute
no_unwind	::mlir::UnitAttr	unit attribute
will_return	::mlir::UnitAttr	unit attribute
op_bundle_sizes	::mlir::DenseI32ArrayAttr	i32 dense array attribute
op_bundle_tags	::mlir::ArrayAttr	array attribute
access_groups	::mlir::ArrayAttr	LLVM dialect access group metadata array
alias_scopes	::mlir::ArrayAttr	LLVM dialect alias scope array
noalias_scopes	::mlir::ArrayAttr	LLVM dialect alias scope array
tbaa	::mlir::ArrayAttr	LLVM dialect TBAA tag metadata array
Operands: ¶
Operand	Description
callee_operands	variadic of LLVM dialect-compatible type
op_bundle_operands	variadic of LLVM dialect-compatible type
Results: ¶
Result	Description
result	LLVM dialect-compatible type