//===----------------------------------------------------------------------===//
// GlobalLoadOp
//===----------------------------------------------------------------------===//

def MLProgram_GlobalLoadOp : MLProgram_Op<"global_load", [
    DeclareOpInterfaceMethods<OpAsmOpInterface, ["getAsmResultNames"]>,
    DeclareOpInterfaceMethods<SymbolUserOpInterface>
  ]> {
  let summary = "Direct load of a mutable value from a global";
  let description = [{
    Performs a non-atomic, non-volatile, non-synchronized load from a global
    that may be mutable.

    It is fully expected that these constraints are not suitable for
    all situations, and alternative ops should be defined and used for more
    advanced cases.

    This op is side effecting and may not be valid to use in graph regions
    without additional consideration to evaluation order constraints. See
    `global_load_graph` for op which allows for explicit ordering constraints.

    Example:

    ```mlir
    %0 = ml_program.global_load @foobar : tensor<?xi32>
    ```
  }];

  let arguments = (ins
    Arg<SymbolRefAttr, "", [MemRead]>:$global
  );
  let results = (outs
    AnyType:$result
  );

  let assemblyFormat = [{
    $global `:` type($result) attr-dict
  }];

  let extraClassDeclaration = [{
    /// Gets the corresponding GlobalOp (or nullptr).
    GlobalOp getGlobalOp(SymbolTableCollection &symbolTable);
  }];

  let extraClassDefinition = [{
    void $cppClass::getAsmResultNames(
        function_ref<void(::mlir::Value, ::llvm::StringRef)> setNameFn) {
      setNameFn(getResult(), getGlobal().getLeafReference());
    }
  }];
}

