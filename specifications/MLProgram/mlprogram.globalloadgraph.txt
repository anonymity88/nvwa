//===----------------------------------------------------------------------===//
// GlobalLoadGraphOp
//===----------------------------------------------------------------------===//

def MLProgram_GlobalLoadGraphOp : MLProgram_Op<"global_load_graph", [
    DeclareOpInterfaceMethods<SymbolUserOpInterface>
  ]> {
  let summary = "Direct load of a mutable value from a global in Graph region";
  let description = [{
    Performs a non-atomic, non-volatile, non-synchronized load from a global
    that may be mutable.

    It is fully expected that these constraints are not suitable for all
    situations, and alternative ops should be defined and used for more advanced
    cases.

    This op is side effecting and may not be valid to use in graph regions
    without additional consideration to evaluation order constraints.

    Example:

    ```mlir
    %0, %cstr = ml_program.global_load_graph @foobar
      ordering (%token -> !ml_program.token) : tensor<?xi32>
    ```
  }];

  let arguments = (ins
    Arg<SymbolRefAttr, "", [MemRead]>:$global,
    Variadic<MLProgram_TokenType>:$consumeTokens
  );
  let results = (outs
    AnyType:$result,
    MLProgram_TokenType:$produceToken
  );

  let assemblyFormat = [{
    $global `` custom<TokenOrdering>($consumeTokens, type($produceToken)) `:` type($result) attr-dict
  }];

  let extraClassDeclaration = [{
    /// Gets the corresponding GlobalOp (or nullptr).
    GlobalOp getGlobalOp(SymbolTableCollection &symbolTable);
  }];
}

