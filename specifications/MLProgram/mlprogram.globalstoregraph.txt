//===----------------------------------------------------------------------===//
// GlobalStoreGraphOp
//===----------------------------------------------------------------------===//

def MLProgram_GlobalStoreGraphOp : MLProgram_Op<"global_store_graph", [
    DeclareOpInterfaceMethods<SymbolUserOpInterface>
  ]> {
  let summary = "Direct store of a value into a mutable global";
  let description = [{
    Performs a non-atomic, non-volatile, non-synchronized store to a mutable
    global.

    It is fully expected that these constraints are not suitable for
    all situations, and alternative ops should be defined and used for more
    advanced cases.

    This op is side effecting and may not be valid to use in graph regions
    without additional consideration to evaluation order constraints.

    Example:

    ```mlir
    %token = ml_program.global_store @foobar = %0 : tensor<?xi32>
      ordering (%in_token -> !ml_program.token) : tensor<?xi32>
    ```
  }];

  let arguments = (ins
    Arg<SymbolRefAttr, "", [MemRead]>:$global,
    AnyType:$value,
    Variadic<MLProgram_TokenType>:$consumeTokens
  );
  let results = (outs
    MLProgram_TokenType:$produceToken
  );

  let assemblyFormat = [{
    $global `=` $value `` custom<TokenOrdering>($consumeTokens, type($produceToken)) `:` type($value) attr-dict
  }];

  let extraClassDeclaration = [{
    /// Gets the corresponding GlobalOp (or nullptr).
    GlobalOp getGlobalOp(SymbolTableCollection &symbolTable);
  }];
}

