//===----------------------------------------------------------------------===//
// InParallelOp
//===----------------------------------------------------------------------===//

def InParallelOp : SCF_Op<"forall.in_parallel", [
       Pure,
       Terminator,
       DeclareOpInterfaceMethods<ParallelCombiningOpInterface>,
       HasParent<"ForallOp">,
      ] # GraphRegionNoTerminator.traits> {
  let summary = "terminates a `forall` block";
  let description = [{
    The `scf.forall.in_parallel` is a designated terminator for
    the `scf.forall` operation.

    It has a single region with a single block that contains a flat list of ops.
    Each such op participates in the aggregate formation of a single result of
    the enclosing `scf.forall`.
    The result number corresponds to the position of the op in the terminator.
  }];

  let regions = (region SizedRegion<1>:$region);

  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;

  // The default builder does not add a region with an empty body, add our own.
  let skipDefaultBuilders = 1;
  let builders = [
    OpBuilder<(ins)>,
  ];

  // TODO: Add a `InParallelOpInterface` interface for ops that can
  // appear inside in_parallel.
  let extraClassDeclaration = [{
    ::llvm::SmallVector<::mlir::BlockArgument> getDests();
    ::llvm::iterator_range<::mlir::Block::iterator> getYieldingOps();
    ::mlir::OpResult getParentResult(int64_t idx);
  }];
}

