transform.structured.rewrite_in_destination_passing_style (transform::RewriteInDestinationPassingStyleOp) ¶
Syntax:

operation ::= `transform.structured.rewrite_in_destination_passing_style` $target attr-dict
              `:` functional-type($target, results)
Rewrite a supported tensor operation that is not in destination-passing style into a form that is in destination-passing style. Currently supported operations are:

tensor.pad
tensor.generate
tensor.from_elements This dichotomy hints at a future interface, for now the implementation just switches between different implementation.
Return modes ¶
This operation ignores non-unsupported ops and drops them from the return. If all the operations referred to by the target handle generalize properly, the transform succeeds. Otherwise the transform produces a silenceable failure. The return handle points to a subset of successfully produced operations:

tensor.pad case, the returned handle points to the tensor.insert_slice.
tensor.generate case, the returned handle points to the linalg.generic.
tensor.from_elements case, the returned handle points to the last tensor.insert.
Traits: FunctionalStyleTransformOpTrait, ReportTrackingListenerFailuresOpTrait, TransformEachOpTrait

Interfaces: MemoryEffectsOpInterface, TransformOpInterface

Operands: ¶
Operand	Description
target	TransformHandleTypeInterface instance
Results: ¶
Result	Description
transformed	TransformHandleTypeInterface instance