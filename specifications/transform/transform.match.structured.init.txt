transform.match.structured.init (transform::MatchStructuredInitOp) ¶
Captures init operand(s) of a structured operation

Syntax:

operation ::= `transform.match.structured.init` $operand_handle `[`custom<TransformMatchDims>($raw_position_list, $is_inverted, $is_all)`]` attr-dict `:` custom<SemiFunctionType>(type($operand_handle), type($result))
Produces a transform dialect value depending on the result type:

If the result type is a value handle, it will be associated with the init operand(s) of the payload operation associated with the operand handle.
If the result type is an operation handle, it will be associated with the operation defining the init operand(s) of the payload operation associated with the operand handle.
If the result type is an affine map parameter type, it will be associated with the indexing map that corresponds to the init operand(s) of the payload operation associated with the operand handle.
For example, given the following operation:

%arg3 = linalg.fill
linalg.matmul ins(%arg1, %arg2 : ...) outs(%arg3 : ...)
in case of a successful match for init operand 0 this operation will return, for each of the respective cases above:

A handle to %arg3 if the result is a value handle.
A handle to linalg.fill if the result is an operation handle.
A parameter containing the result map of the matrix multiplication, i.e. affine_map<(d0, d1, d2) -> (d0, d1)> if the result is an affine map parameter.
The match succeeds if the conditions specified as attributes succeed.

The following init specifications are supported:

all: all inits are checked and captured;
list of integers: the listed inits are checked and captured;
except( list of integers ): all inits except the specified ones are checked and captured.
Negative indexes are interpreted by counting values from the last one (similarly to Python). For example, -1 means the last init and except(-1) means all inits but the last. Indexes must be unique, including after interpretation of negative ones.

Produces a silenceable failure in case of index overflow, including backward counting.

This op can only appear immediately inside a transform.match.structured op and apply to its first block argument because it assumes the payload to have been already checked for being a single structured op.

Return modes ¶
Succeeds if all init(outs) indexes are in bounds, produces a silenceable failure otherwise. Additionally, when the result is an operation handle, produces a silenceable failure if the init(outs) specification defines more than one init(outs) or if the operand is not an operation result.

Traits: SingleOpMatcher, StructuredPredicate

Interfaces: MatchOpInterface, MemoryEffectsOpInterface, TransformOpInterface

Attributes: ¶
Attribute	MLIR Type	Description
raw_position_list	::mlir::DenseI64ArrayAttr	i64 dense array attribute
is_inverted	::mlir::UnitAttr	unit attribute
is_all	::mlir::UnitAttr	unit attribute
permutation	::mlir::UnitAttr	unit attribute
projected_permutation	::mlir::UnitAttr	unit attribute
Operands: ¶
Operand	Description
operand_handle	TransformHandleTypeInterface instance
Results: ¶
Result	Description
result	transform operation or value handle or